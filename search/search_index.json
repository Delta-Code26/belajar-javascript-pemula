{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":[" "]},"docs":[{"location":"","title":"Belajar JavaScript dari Nol BERSAMA DELTA \ud83d\ude80","text":"<p>Selamat datang di dokumentasi belajar JavaScript dari dasar banget! Dokumentasi ini cocok buat pemula yang ingin belajar JavaScript langkah demi langkah, dari console log sampai bikin mini project.</p> <p>Kamu akan jadi jago JavaScript, satu console.log() pada satu waktu \ud83d\ude0e</p>"},{"location":"dasar/01-hello-world/","title":"Hello World","text":"<p>Oke Marno, siap tempur! Berikut isi lengkap dan interaktif untuk file <code>01-hello-world.md</code>, siap ditempatkan di folder <code>D:\\dokumentasi\\javascript\\belajar-javascript-pemula\\docs\\dasar\\</code> \ud83d\ude80</p> <pre><code># \ud83d\udc4b Hello World di JavaScript\n\n&gt; \"Perjalanan seribu bug dimulai dari satu `console.log()`\" \u2014 Dev bijak.\n\n---\n\n## \ud83e\udde0 Tujuan Pembelajaran\n\nSetelah menyelesaikan materi ini, kamu akan:\n- Mengetahui bagaimana cara menulis dan menjalankan kode JavaScript pertama kamu\n- Paham konsep dasar `console.log()` dan eksekusi via browser dan terminal\n\n---\n\n## \ud83d\udd0d Apa itu `Hello World`?\n\n`Hello World` adalah *tradisi global* semua programmer ketika belajar bahasa baru. Tujuannya? Buat nyapa dunia, nunjukkin bahwa kodenya berhasil jalan!\n\n---\n\n## \ud83d\udcbb Menjalankan JavaScript di Browser\n\n1. Buka browser favorit (Chrome, Edge, dll)\n2. Klik kanan &gt; **Inspect / Periksa**\n3. Buka tab **Console**\n4. Ketik:\n\n```javascript\nconsole.log(\"Hello World dari browser!\");\n</code></pre> <ol> <li>Tekan Enter! \ud83c\udf89</li> </ol>"},{"location":"dasar/01-hello-world/#menjalankan-javascript-di-nodejs","title":"\ud83d\udcbb Menjalankan JavaScript di Node.js","text":"<ol> <li>Buka folder project kamu di terminal</li> <li>Buat file: <code>hello.js</code></li> <li>Isi file:</li> </ol> <pre><code>console.log(\"Hello World dari Node.js!\");\n</code></pre> <ol> <li>Jalankan via terminal:</li> </ol> <pre><code>node hello.js\n</code></pre>"},{"location":"dasar/01-hello-world/#penjelasan-kode","title":"\ud83d\udd25 Penjelasan Kode","text":"<pre><code>console.log(\"Hello World!\");\n</code></pre> <ul> <li><code>console</code> = objek untuk mengakses console</li> <li><code>.log()</code> = fungsi buat nampilin teks ke console</li> <li><code>\"Hello World!\"</code> = string (teks) yang mau ditampilin</li> </ul>"},{"location":"dasar/01-hello-world/#kenapa-harus-consolelog","title":"\ud83e\udd14 Kenapa harus <code>console.log</code>?","text":"<p>Karena itu cara paling simpel buat ngecek apakah kode kita jalan atau enggak. Ibaratnya kaya ngetes mic: \u201cTes\u2026 Tes\u2026 satu dua tiga\u2026 masuk ya?\u201d</p>"},{"location":"dasar/01-hello-world/#quiz-mini","title":"\ud83e\uddea Quiz Mini","text":"<p>Apa output dari kode berikut?</p> <pre><code>console.log(\"Halo, dunia!\");\nconsole.log(\"Saya belajar JavaScript!\");\n</code></pre> <ul> <li>A. Error</li> <li>B. Dua baris teks</li> <li>C. Satu baris teks</li> <li>D. Dunia jawab balik</li> </ul> <p>\u2705 Jawaban: B. Dua baris teks! Karena kita manggil <code>console.log()</code> dua kali.</p>"},{"location":"dasar/01-hello-world/#tantangan-coding","title":"\ud83c\udfaf Tantangan Coding","text":"<ol> <li>Buat file <code>perkenalan.js</code></li> <li>Tulis 3 <code>console.log()</code> yang menampilkan:</li> <li>Nama kamu</li> <li>Asal kamu</li> <li>Motivasi belajar JavaScript</li> </ol> <p>Contoh output:</p> <pre><code>Nama saya Marno\nSaya dari Malaysia\nSaya belajar JavaScript biar bisa bikin aplikasi keren!\n</code></pre>"},{"location":"dasar/01-hello-world/#tips-tambahan","title":"\ud83d\udca1 Tips Tambahan","text":"<ul> <li>Kalau kamu bisa menampilkan teks, kamu bisa menampilkan data apa pun (angka, variabel, object, dll)</li> <li><code>console.log()</code> juga bisa menerima lebih dari 1 argumen:</li> </ul> <pre><code>let nama = \"Marno\";\nconsole.log(\"Halo\", nama);\n</code></pre>"},{"location":"dasar/01-hello-world/#kembali-ke-daftar-materi","title":"\ud83d\udd01 Kembali ke Daftar Materi","text":"<p>```</p> <p>Kalau kamu setuju, gue bisa buatin juga file <code>02-variabel.md</code> dengan gaya yang sama. Mau lanjut ke situ? Cukup bilang: \"Lanjut ke variabel!\" \ud83e\udde0\u26a1</p>"},{"location":"dasar/02-Variabel/","title":"Variabel","text":"<pre><code># \ud83e\udde0 Variabel di JavaScript\n\n&gt; \"Variabel itu seperti Tupperware\u2014buat nyimpan isi. Bedanya, kalau hilang, nggak dimarahin emak.\" \u2014 Dev waras.\n\n---\n\n## \ud83c\udfaf Tujuan Pembelajaran\n\nDi materi ini, kamu akan:\n- Memahami apa itu variabel\n- Mengenal `var`, `let`, dan `const`\n- Tahu cara menyimpan dan mengakses data di dalam variabel\n\n---\n\n## \ud83d\udd0d Apa itu Variabel?\n\nVariabel adalah **wadah penyimpanan data** di dalam program.  \nContoh simpel:\n\n```javascript\nlet nama = \"Marno\";\nconst umur = 21;\nvar status = \"Belajar JavaScript\";\n</code></pre>"},{"location":"dasar/02-Variabel/#jenis-jenis-variabel","title":"\ud83d\udd27 Jenis-Jenis Variabel","text":""},{"location":"dasar/02-Variabel/#1-var","title":"1. <code>var</code>","text":"<ul> <li>Versi lama</li> <li>Bisa di-redeclarate</li> <li>Kurang aman, jangan sering dipakai</li> </ul> <pre><code>var nama = \"Marno\";\nvar nama = \"Mahasiswa\"; // ini valid tapi nggak direkomendasikan\n</code></pre>"},{"location":"dasar/02-Variabel/#2-let","title":"2. <code>let</code>","text":"<ul> <li>Bisa diganti nilainya</li> <li>Tidak bisa dideklarasi ulang dalam scope yang sama</li> </ul> <pre><code>let mood = \"semangat\";\nmood = \"lelah\"; // bisa!\n</code></pre>"},{"location":"dasar/02-Variabel/#3-const","title":"3. <code>const</code>","text":"<ul> <li>Nilainya TIDAK bisa diubah</li> <li>Harus langsung diisi saat dibuat</li> </ul> <pre><code>const planet = \"Bumi\";\nplanet = \"Mars\"; // \u274c error\n</code></pre>"},{"location":"dasar/02-Variabel/#contoh-program","title":"\ud83d\udcbb Contoh Program","text":"<pre><code>let nama = \"Marno\";\nconst umur = 21;\n\nconsole.log(\"Nama saya:\", nama);\nconsole.log(\"Umur saya:\", umur);\n\nnama = \"Marno Mahasiswa\";\nconsole.log(\"Nama baru saya:\", nama);\n</code></pre>"},{"location":"dasar/02-Variabel/#peraturan-main","title":"\ud83d\udce6 Peraturan Main","text":"Keyword Bisa Diubah Bisa Deklarasi Ulang Keterangan var \u2705 \u2705 Jangan sering dipakai \ud83d\ude05 let \u2705 \u274c Rekomendasi utama \ud83d\udc4d const \u274c \u274c Buat nilai tetap \ud83d\udd12"},{"location":"dasar/02-Variabel/#quiz-mini","title":"\ud83e\udde0 Quiz Mini","text":"<p>Kode ini akan menghasilkan apa?</p> <pre><code>const nama = \"Raka\";\nnama = \"Budi\";\nconsole.log(nama);\n</code></pre> <ul> <li>A. Raka  </li> <li>B. Budi  </li> <li>C. Error  </li> <li>D. Nama bukan urusan saya</li> </ul> <p>\u2705 Jawaban: C. Error! Karena <code>const</code> tidak boleh diubah setelah dideklarasikan.</p>"},{"location":"dasar/02-Variabel/#tantangan-coding","title":"\ud83d\udcaa Tantangan Coding","text":"<ol> <li>Buat file <code>biodata.js</code></li> <li>Simpan:</li> <li>Nama kamu (let)</li> <li>Umur kamu (const)</li> <li>Hobi kamu (let)</li> <li>Tampilkan semuanya di console</li> </ol> <p>Contoh output:</p> <pre><code>Nama saya Marno\nUmur saya 21\nHobi saya ngoding di kebun sawit \ud83c\udf34\ud83d\udcbb\n</code></pre>"},{"location":"dasar/02-Variabel/#tips-tambahan","title":"\ud83d\udcac Tips Tambahan","text":"<ul> <li>Gunakan <code>let</code> untuk nilai yang bisa berubah</li> <li>Gunakan <code>const</code> untuk nilai tetap (seperti API key, config, dsb)</li> <li>Hindari <code>var</code> kecuali lagi nostalgia</li> </ul>"},{"location":"dasar/02-Variabel/#kembali-ke-daftar-materi","title":"\ud83d\udd01 Kembali ke Daftar Materi","text":"<p>```</p> <p>Kalau kamu mau lanjut lagi, tinggal bilang: \"Lanjut ke tipe data!\" biar langsung gue buatin <code>03-tipe-data.md</code> \ud83d\udd25 Let's build this documentation empire bareng-bareng, Marno! \ud83e\uddf1\ud83d\udc51</p>"},{"location":"dasar/03-Tipe-Data/","title":"Tipe Data","text":""},{"location":"dasar/03-Tipe-Data/#03-tipe-data","title":"03 TIPE DATA","text":"<pre><code># \ud83d\udce6 Tipe Data di JavaScript\n\n&gt; \"Tipe data itu kayak karakter game. Ada yang kuat, ada yang fleksibel, dan ada juga yang misterius kayak `undefined`.\" \u2014 Dev RPG \ud83c\udfae\n\n---\n\n## \ud83c\udfaf Tujuan Pembelajaran\n\nSetelah mempelajari materi ini, kamu akan:\n- Mengenal berbagai jenis tipe data di JavaScript\n- Bisa membedakan antara `number`, `string`, `boolean`, dan lainnya\n- Tahu cara mengecek tipe data\n\n---\n\n## \ud83d\udccb Daftar Tipe Data Utama\n\n| Tipe Data    | Contoh                        |\n|--------------|-------------------------------|\n| String       | `\"halo\"`, `'javascript'`      |\n| Number       | `123`, `3.14`                 |\n| Boolean      | `true`, `false`               |\n| Undefined    | variabel yang belum diisi     |\n| Null         | nilai kosong (sengaja dikosongin) |\n| Object       | `{nama: \"Marno\", umur: 21}`   |\n| Array        | `[\"apel\", \"jeruk\", \"durian\"]` |\n\n---\n\n## \ud83d\udd0d Penjelasan Sederhana\n\n### \ud83d\udd24 String\nTeks yang dibungkus pakai tanda kutip:\n```javascript\nlet nama = \"Marno\";\n</code></pre>"},{"location":"dasar/03-Tipe-Data/#number","title":"\ud83d\udd22 Number","text":"<p>Angka, bisa bulat atau desimal:</p> <pre><code>let umur = 21;\nlet berat = 65.5;\n</code></pre>"},{"location":"dasar/03-Tipe-Data/#boolean","title":"\ud83d\udd18 Boolean","text":"<p>Cuma ada 2 nilai: <code>true</code> atau <code>false</code></p> <pre><code>let sedangBelajar = true;\n</code></pre>"},{"location":"dasar/03-Tipe-Data/#undefined","title":"\ud83c\udf2b Undefined","text":"<p>Kalau kamu bikin variabel tapi belum isi nilainya:</p> <pre><code>let mood;\nconsole.log(mood); // undefined\n</code></pre>"},{"location":"dasar/03-Tipe-Data/#null","title":"\ud83d\udd73 Null","text":"<p>Nilai kosong tapi dengan sengaja dikosongin:</p> <pre><code>let pacar = null;\n</code></pre>"},{"location":"dasar/03-Tipe-Data/#object","title":"\ud83e\uddf1 Object","text":"<p>Kumpulan data dalam format kunci-nilai:</p> <pre><code>let orang = {\n  nama: \"Marno\",\n  umur: 21,\n  asal: \"Malaysia\"\n};\n</code></pre>"},{"location":"dasar/03-Tipe-Data/#array","title":"\ud83d\udcda Array","text":"<p>Kumpulan data yang berurutan:</p> <pre><code>let buah = [\"apel\", \"mangga\", \"durian\"];\n</code></pre>"},{"location":"dasar/03-Tipe-Data/#mengecek-tipe-data","title":"\ud83e\uddea Mengecek Tipe Data","text":"<p>Gunakan <code>typeof</code>:</p> <pre><code>let umur = 20;\nconsole.log(typeof umur); // \"number\"\n\nlet nama = \"Marno\";\nconsole.log(typeof nama); // \"string\"\n</code></pre>"},{"location":"dasar/03-Tipe-Data/#quiz-mini","title":"\ud83e\udde0 Quiz Mini","text":"<p>Apa hasil dari kode berikut?</p> <pre><code>let x;\nconsole.log(typeof x);\n</code></pre> <ul> <li>A. <code>null</code></li> <li>B. <code>undefined</code></li> <li>C. <code>object</code></li> <li>D. <code>error</code></li> </ul> <p>\u2705 Jawaban: B. <code>undefined</code> karena <code>x</code> belum punya nilai.</p>"},{"location":"dasar/03-Tipe-Data/#tantangan-coding","title":"\ud83d\udcaa Tantangan Coding","text":"<ol> <li>Buat variabel untuk menyimpan:</li> <li>Nama (string)</li> <li>Umur (number)</li> <li>Apakah kamu suka ngoding? (boolean)</li> <li>Tanggal lahir (string atau object Date)</li> <li>List hobi kamu (array)</li> <li> <p>Data profil lengkap kamu (object)</p> </li> <li> <p>Tampilkan semuanya pakai <code>console.log()</code></p> </li> </ol>"},{"location":"dasar/03-Tipe-Data/#tips-tambahan","title":"\ud83e\udde0 Tips Tambahan","text":"<ul> <li>Tipe data penting banget buat logika program</li> <li>JavaScript itu dinamis \u2014 tipe datanya bisa berubah tergantung nilai:</li> </ul> <pre><code>let data = 123;      // number\ndata = \"seratus\";    // sekarang jadi string\n</code></pre>"},{"location":"dasar/03-Tipe-Data/#kembali-ke-daftar-materi","title":"\ud83d\udd01 Kembali ke Daftar Materi","text":"<p>```</p> <p>Gas lagi? Kalau kamu bilang: \"Lanjut ke logika!\" Gue siapin <code>04-logika.md</code> lengkap sama operator dan humor seger \ud83e\udd13\u2728</p>"},{"location":"dasar/04-Logika/","title":"Logika","text":"<p>Wuhuu! Let\u2019s go Marno! Sekarang saatnya masuk ke materi yang jadi pondasi dari semua percabangan hidup dan kode: Logika di JavaScript! \ud83e\udde0\ud83d\udca5 Berikut isi lengkap buat file <code>D:\\dokumentasi\\javascript\\belajar-javascript-pemula\\docs\\dasar\\04-logika.md</code></p> <pre><code># \ud83e\udde0 Logika &amp; Operator di JavaScript\n\n&gt; \"Kalau hidup aja butuh logika, apalagi ngoding.\" \u2014 Filosofi koding saat bug menyerang.\n\n---\n\n## \ud83c\udfaf Tujuan Pembelajaran\n\nSetelah mempelajari materi ini, kamu akan:\n- Mengerti konsep percabangan dan pengambilan keputusan\n- Mengenal operator logika dan perbandingan\n- Bisa membuat kondisi `if`, `else`, dan `else if`\n\n---\n\n## \ud83e\uddea Operator Perbandingan\n\n| Operator | Arti                      | Contoh               |\n|----------|---------------------------|----------------------|\n| `==`     | Sama nilai                 | `5 == '5'` \u2192 true    |\n| `===`    | Sama nilai &amp; tipe          | `5 === '5'` \u2192 false  |\n| `!=`     | Tidak sama nilai           | `5 != 4` \u2192 true      |\n| `!==`    | Tidak sama nilai/tipe      | `5 !== '5'` \u2192 true   |\n| `&gt;`      | Lebih besar                | `10 &gt; 5` \u2192 true      |\n| `&lt;`      | Lebih kecil                | `3 &lt; 7` \u2192 true       |\n| `&gt;=`     | Lebih besar atau sama      | `5 &gt;= 5` \u2192 true      |\n| `&lt;=`     | Lebih kecil atau sama      | `4 &lt;= 5` \u2192 true      |\n\n---\n\n## \ud83d\udd00 Operator Logika\n\n| Operator | Nama          | Contoh                       | Hasil    |\n|----------|---------------|------------------------------|----------|\n| `&amp;&amp;`     | AND (dan)     | `true &amp;&amp; false`              | false    |\n| `||`     | OR (atau)     | `true || false`              | true     |\n| `!`      | NOT (kebalikan)| `!true`                      | false    |\n\n---\n\n## \ud83d\udccd Struktur If-Else\n\n```javascript\nlet nilai = 80;\n\nif (nilai &gt;= 75) {\n  console.log(\"Lulus \ud83c\udf89\");\n} else {\n  console.log(\"Belum lulus \ud83d\ude25\");\n}\n</code></pre>"},{"location":"dasar/04-Logika/#struktur-else-if","title":"\ud83e\uddf1 Struktur Else If","text":"<pre><code>let skor = 90;\n\nif (skor &gt;= 90) {\n  console.log(\"Nilai A\");\n} else if (skor &gt;= 80) {\n  console.log(\"Nilai B\");\n} else {\n  console.log(\"Nilai C ke bawah\");\n}\n</code></pre>"},{"location":"dasar/04-Logika/#kasus-nyata","title":"\ud83e\udde0 Kasus Nyata","text":"<pre><code>let login = true;\nlet role = \"admin\";\n\nif (login &amp;&amp; role === \"admin\") {\n  console.log(\"Selamat datang, Admin!\");\n} else if (login &amp;&amp; role === \"user\") {\n  console.log(\"Halo, pengguna!\");\n} else {\n  console.log(\"Silakan login dulu!\");\n}\n</code></pre>"},{"location":"dasar/04-Logika/#trik-cepat","title":"\ud83d\udd25 Trik Cepat","text":"<p>Gunakan <code>===</code> untuk hasil yang lebih akurat, karena dia cek nilai dan tipe data!</p> <pre><code>console.log(5 == \"5\");   // true (cuma nilai)\nconsole.log(5 === \"5\");  // false (beda tipe)\n</code></pre>"},{"location":"dasar/04-Logika/#quiz-mini","title":"\ud83e\udde0 Quiz Mini","text":"<p>Apa hasil dari kode ini?</p> <pre><code>let usia = 17;\nif (usia &gt;= 18) {\n  console.log(\"Boleh masuk\");\n} else {\n  console.log(\"Masih bocil\");\n}\n</code></pre> <ul> <li>A. Error  </li> <li>B. Boleh masuk  </li> <li>C. Masih bocil  </li> <li>D. Nunggu KTP dulu</li> </ul> <p>\u2705 Jawaban: C. Masih bocil</p>"},{"location":"dasar/04-Logika/#tantangan-coding","title":"\ud83d\udcaa Tantangan Coding","text":"<ol> <li>Buat file <code>cek-umur.js</code></li> <li>Simpan variabel <code>umur</code></li> <li>Jika umur:</li> <li>&lt; 13 \u2192 tampilkan \"Anak-anak\"</li> <li>13\u201317 \u2192 tampilkan \"Remaja\"</li> <li>18+ \u2192 tampilkan \"Dewasa\"</li> </ol> <p>Bonus: Tambahkan logika jika umur negatif \u2192 tampilkan \"Umur gak valid\"</p>"},{"location":"dasar/04-Logika/#tips-tambahan","title":"\ud83e\udde0 Tips Tambahan","text":"<ul> <li>Jangan kebanyakan <code>else if</code>, nanti kode kayak sinetron: panjang &amp; dramatis</li> <li>Gunakan <code>switch</code> kalau kondisinya banyak tapi dari 1 variabel (nanti kita bahas!)</li> </ul>"},{"location":"dasar/04-Logika/#kembali-ke-daftar-materi","title":"\ud83d\udd01 Kembali ke Daftar Materi","text":"<p>```</p> <p>Kalau kamu udah siap mental, kita bisa lanjut ke <code>05-function.md</code> buat ngebahas fungsi-fungsi alias jurus pamungkas pemrograman! Bilang aja: \"Lanjut ke fungsi!\" dan kita gas lagi! \ud83e\uddd9\u200d\u2642\ufe0f\u2728</p>"},{"location":"dasar/05-Loop/","title":"Loop","text":"<p>Gas terus Marno! Sekarang saatnya masuk ke dunia perulangan alias looping \u2014 skill wajib buat ngoding efisien tanpa ngopi sampai pagi! \ud83d\udd01\u2615</p> <p>Berikut isi lengkap buat file: <code>D:\\dokumentasi\\javascript\\belajar-javascript-pemula\\docs\\dasar\\05-perulangan.md</code></p> <pre><code># \ud83d\udd01 Perulangan (Loop) di JavaScript\n\n&gt; \"Kalau hidupmu terasa berulang-ulang, selamat, kamu udah kayak program.\" \u2014 Dev Galau\n\n---\n\n## \ud83c\udfaf Tujuan Pembelajaran\n\nDi materi ini, kamu akan:\n- Mengenal jenis-jenis perulangan di JavaScript\n- Mengetahui kapan dan bagaimana menggunakan `for`, `while`, dan `do...while`\n- Paham cara break dan continue kerja loop\n\n---\n\n## \ud83d\udd02 Kenapa Butuh Loop?\n\nBayangin mau print \"Halo\" 100 kali. Masa nulis 100 `console.log()`?  \nLoop = cara otomatis dan cerdas untuk ngulang suatu aksi berkali-kali \ud83d\udca1\n\n---\n\n## \ud83d\udd01 Tipe-Tipe Perulangan\n\n### 1. \ud83d\udd04 `for` loop\n\nCocok buat loop dengan jumlah pasti.\n\n```javascript\nfor (let i = 1; i &lt;= 5; i++) {\n  console.log(\"Loop ke-\", i);\n}\n</code></pre> <p>Penjelasan: - <code>let i = 1</code> \u2192 mulai dari 1 - <code>i &lt;= 5</code> \u2192 berhenti saat i lebih dari 5 - <code>i++</code> \u2192 setiap putaran naik 1</p>"},{"location":"dasar/05-Loop/#2-while-loop","title":"2. \ud83c\udf00 <code>while</code> loop","text":"<p>Dipakai kalau jumlah perulangan nggak pasti, asal kondisinya masih <code>true</code>.</p> <pre><code>let i = 1;\nwhile (i &lt;= 5) {\n  console.log(\"While loop ke-\", i);\n  i++;\n}\n</code></pre>"},{"location":"dasar/05-Loop/#3-dowhile-loop","title":"3. \ud83d\udd01 <code>do...while</code> loop","text":"<p>Mirip <code>while</code>, tapi dijalankan minimal sekali, walau kondisi <code>false</code>.</p> <pre><code>let i = 1;\ndo {\n  console.log(\"Do...While ke-\", i);\n  i++;\n} while (i &lt;= 5);\n</code></pre>"},{"location":"dasar/05-Loop/#break-dan-continue","title":"\u2702\ufe0f <code>break</code> dan <code>continue</code>","text":""},{"location":"dasar/05-Loop/#break-menghentikan-loop","title":"\ud83d\udd1a <code>break</code> \u2192 menghentikan loop","text":"<pre><code>for (let i = 1; i &lt;= 10; i++) {\n  if (i === 5) break;\n  console.log(i);\n}\n// Output: 1 2 3 4\n</code></pre>"},{"location":"dasar/05-Loop/#continue-skip-1-iterasi","title":"\u23e9 <code>continue</code> \u2192 skip 1 iterasi","text":"<pre><code>for (let i = 1; i &lt;= 5; i++) {\n  if (i === 3) continue;\n  console.log(i);\n}\n// Output: 1 2 4 5\n</code></pre>"},{"location":"dasar/05-Loop/#quiz-mini","title":"\ud83e\udde0 Quiz Mini","text":"<p>Berapa kali kode ini nge-print \"Halo\"?</p> <pre><code>let i = 1;\nwhile (i &lt; 4) {\n  console.log(\"Halo\");\n  i++;\n}\n</code></pre> <ul> <li>A. 2 kali  </li> <li>B. 3 kali  </li> <li>C. 4 kali  </li> <li>D. Infinite loop</li> </ul> <p>\u2705 Jawaban: B. 3 kali (i: 1, 2, 3)</p>"},{"location":"dasar/05-Loop/#tantangan-coding","title":"\ud83d\udcaa Tantangan Coding","text":"<ol> <li>Buat program yang menampilkan angka 1 sampai 100</li> <li>Tampilkan hanya angka genap</li> <li>Jika angka kelipatan 10, tampilkan: <code>\"Kelipatan 10: 10\"</code> dst.</li> </ol> <p>Contoh output:</p> <pre><code>2\n4\n...\n10 \u2192 Kelipatan 10!\n...\n100 \u2192 Kelipatan 10!\n</code></pre>"},{"location":"dasar/05-Loop/#tips-tambahan","title":"\ud83e\udde0 Tips Tambahan","text":"<ul> <li>Gunakan <code>for</code> kalau kamu tahu berapa kali harus ngulang</li> <li>Gunakan <code>while</code> buat kondisi dinamis (contoh: login sampai benar)</li> <li>Jangan lupa update nilai loop biar gak infinite loop (browser kamu bisa ngambek lho)</li> </ul>"},{"location":"dasar/05-Loop/#kembali-ke-daftar-materi","title":"\ud83d\udd01 Kembali ke Daftar Materi","text":"<p>```</p> <p>Kalau kamu mau lanjut bahas jurus sakti berikutnya: fungsi! Bilang aja: \"Lanjut ke fungsi!\" dan kita bakal bikin <code>06-fungsi.md</code> bareng \ud83e\uddd9\u200d\u2642\ufe0f\u2728</p> <p>Mau lanjut atau rehat dulu, Bos Marno? \ud83d\ude0e</p>"},{"location":"dasar/06-Function/","title":"Function","text":"<p>Oke Bos Marno, saatnya kita ngulik fungsi (function) alias jurus rahasia dalam dunia pemrograman! \ud83e\uddd9\u200d\u2642\ufe0f\ud83d\udcbb Fungsi itu kayak kombo skill di game: bisa dipanggil kapan aja buat nyelesain misi berulang!</p> <p>Berikut isi lengkap buat file: <code>D:\\dokumentasi\\javascript\\belajar-javascript-pemula\\docs\\dasar\\06-fungsi.md</code></p> <pre><code># \ud83e\uddd9\u200d\u2642\ufe0f Fungsi (Function) di JavaScript\n\n&gt; \"Kalau hidup punya tujuan, kode juga harus punya fungsi.\" \u2014 Dev Baper di malam minggu\n\n---\n\n## \ud83c\udfaf Tujuan Pembelajaran\n\nDi akhir materi ini, kamu akan:\n- Mengerti apa itu fungsi dan kenapa penting\n- Bisa bikin fungsi sendiri\n- Bisa pakai parameter &amp; return value\n- Kenal tipe fungsi: deklarasi &amp; ekspresi\n\n---\n\n## \ud83e\udde0 Apa Itu Fungsi?\n\nFungsi = blok kode yang bisa dipakai berulang-ulang.  \nBisa diibaratkan kayak mesin otomatis buat tugas tertentu.\n\n```javascript\nfunction sapa() {\n  console.log(\"Halo, Marno!\");\n}\n\nsapa(); // Output: Halo, Marno!\n</code></pre>"},{"location":"dasar/06-Function/#struktur-fungsi","title":"\ud83e\uddf1 Struktur Fungsi","text":"<pre><code>function namaFungsi() {\n  // isi perintah di sini\n}\n</code></pre> <p>Panggil dengan: <code>namaFungsi();</code></p>"},{"location":"dasar/06-Function/#fungsi-dengan-parameter","title":"\ud83d\udce5 Fungsi dengan Parameter","text":"<pre><code>function sapa(nama) {\n  console.log(\"Halo, \" + nama + \"!\");\n}\n\nsapa(\"Marno\"); // Output: Halo, Marno!\nsapa(\"Putri\"); // Output: Halo, Putri!\n</code></pre>"},{"location":"dasar/06-Function/#fungsi-dengan-return-value","title":"\ud83d\udce4 Fungsi dengan Return Value","text":"<pre><code>function tambah(a, b) {\n  return a + b;\n}\n\nlet hasil = tambah(3, 5);\nconsole.log(hasil); // 8\n</code></pre>"},{"location":"dasar/06-Function/#function-expression","title":"\ud83e\udde0 Function Expression","text":"<p>Fungsi bisa disimpan dalam variabel juga:</p> <pre><code>const kali = function(x, y) {\n  return x * y;\n};\n\nconsole.log(kali(4, 5)); // 20\n</code></pre>"},{"location":"dasar/06-Function/#arrow-function-versi-singkat","title":"\u26a1 Arrow Function (Versi Singkat)","text":"<p>Arrow function = gaya modern, lebih ringkas:</p> <pre><code>const bagi = (a, b) =&gt; {\n  return a / b;\n};\n\nconsole.log(bagi(10, 2)); // 5\n</code></pre> <p>Kalau cuma 1 baris:</p> <pre><code>const halo = nama =&gt; `Halo, ${nama}!`;\nconsole.log(halo(\"Marno\")); // Halo, Marno!\n</code></pre>"},{"location":"dasar/06-Function/#quiz-mini","title":"\ud83e\udde0 Quiz Mini","text":"<p>Apa hasil dari kode berikut?</p> <pre><code>function cek(nama) {\n  return \"Halo \" + nama;\n}\nconsole.log(cek(\"Asep\"));\n</code></pre> <ul> <li>A. <code>Halo Asep</code> </li> <li>B. <code>cek Asep</code> </li> <li>C. <code>undefined</code> </li> <li>D. Error</li> </ul> <p>\u2705 Jawaban: A. <code>Halo Asep</code></p>"},{"location":"dasar/06-Function/#tantangan-coding","title":"\ud83d\udcaa Tantangan Coding","text":"<ol> <li>Buat fungsi <code>luasPersegi(sisi)</code> \u2192 return luas</li> <li>Buat fungsi <code>luasSegitiga(alas, tinggi)</code> \u2192 return luas</li> <li>Buat fungsi <code>cekGanjilGenap(angka)</code> \u2192 return <code>'Ganjil'</code> atau <code>'Genap'</code></li> </ol> <p>Bonus: Gunakan arrow function buat semuanya \u26a1</p>"},{"location":"dasar/06-Function/#tips-tambahan","title":"\ud83e\udde0 Tips Tambahan","text":"<ul> <li>Fungsi bikin kode lebih rapi, reusable, dan mudah diuji</li> <li>Jangan takut pecah-pecah kode ke fungsi kecil</li> <li>Kombinasikan fungsi dengan loop atau kondisi buat skill kombo! \ud83c\udf00</li> </ul>"},{"location":"dasar/06-Function/#kembali-ke-daftar-materi","title":"\ud83d\udd01 Kembali ke Daftar Materi","text":"<p>```</p> <p>Next: Kita bisa lanjut ke Array dan metode-metodenya \u2014 karena data itu asyik kalau diolah rame-rame kayak arisan digital \ud83d\ude06 Bilang aja: \"Lanjut ke array!\" dan kita buatkan file <code>07-array.md</code>!</p> <p>Atau mau tambahin latihan coding interaktif buat tiap fungsi? Bisa juga!</p>"},{"location":"dasar/07-Array/","title":"Array","text":"<p>Siap bosku Marno! Saatnya kita masuk ke topik Array \u2014 tempat ngumpulnya data yang suka ngerecokin hidup programmer kalau gak ngerti \ud83d\ude0e Anggap aja array itu seperti warung makan: satu tempat, banyak lauk (data) \ud83c\udf71\ud83d\udd25</p> <p>Berikut isi lengkap untuk file: <code>D:\\dokumentasi\\javascript\\belajar-javascript-pemula\\docs\\dasar\\07-array.md</code></p> <pre><code># \ud83c\udf71 Array di JavaScript\n\n&gt; \"Sendiri itu sepi, makanya pakai array.\" \u2014 Programmer jomblo\n\n---\n\n## \ud83c\udfaf Tujuan Pembelajaran\n\nDi akhir materi ini, kamu akan:\n- Tau apa itu array dan cara membuatnya\n- Bisa akses data dalam array\n- Gunakan metode dasar array seperti `push`, `pop`, `shift`, `unshift`, `length`, dll.\n\n---\n\n## \ud83d\udce6 Apa Itu Array?\n\nArray = tipe data yang bisa menyimpan **banyak nilai** dalam satu variabel.\n\n```javascript\nlet buah = [\"apel\", \"mangga\", \"jeruk\"];\nconsole.log(buah);\n</code></pre>"},{"location":"dasar/07-Array/#mengakses-elemen-array","title":"\ud83e\udded Mengakses Elemen Array","text":"<p>Array punya index (mulai dari 0):</p> <pre><code>let hewan = [\"kucing\", \"anjing\", \"kelinci\"];\nconsole.log(hewan[0]); // Output: kucing\nconsole.log(hewan[2]); // Output: kelinci\n</code></pre>"},{"location":"dasar/07-Array/#metode-array-penting","title":"\ud83d\udee0\ufe0f Metode Array Penting","text":""},{"location":"dasar/07-Array/#length","title":"<code>length</code>","text":"<p>Jumlah elemen di array:</p> <pre><code>let angka = [1, 2, 3];\nconsole.log(angka.length); // 3\n</code></pre>"},{"location":"dasar/07-Array/#push-dan-pop","title":"<code>push()</code> dan <code>pop()</code>","text":"<ul> <li><code>push()</code> \u2192 tambah ke akhir</li> <li><code>pop()</code> \u2192 hapus dari akhir</li> </ul> <pre><code>let angka = [1, 2, 3];\nangka.push(4); // [1, 2, 3, 4]\nangka.pop();   // [1, 2, 3]\n</code></pre>"},{"location":"dasar/07-Array/#unshift-dan-shift","title":"<code>unshift()</code> dan <code>shift()</code>","text":"<ul> <li><code>unshift()</code> \u2192 tambah ke awal</li> <li><code>shift()</code> \u2192 hapus dari awal</li> </ul> <pre><code>let nama = [\"Budi\", \"Ani\"];\nnama.unshift(\"Siti\"); // [\"Siti\", \"Budi\", \"Ani\"]\nnama.shift();         // [\"Budi\", \"Ani\"]\n</code></pre>"},{"location":"dasar/07-Array/#looping-array","title":"\ud83c\udf00 Looping Array","text":"<pre><code>let warna = [\"merah\", \"biru\", \"kuning\"];\n\nfor (let i = 0; i &lt; warna.length; i++) {\n  console.log(warna[i]);\n}\n</code></pre>"},{"location":"dasar/07-Array/#forof-cara-modern","title":"\ud83d\udd01 for...of (Cara modern)","text":"<pre><code>let angka = [1, 2, 3];\nfor (let nilai of angka) {\n  console.log(nilai);\n}\n</code></pre>"},{"location":"dasar/07-Array/#array-campur-aduk-bisa","title":"\ud83d\udca5 Array Campur Aduk? Bisa!","text":"<pre><code>let campur = [\"teks\", 123, true, [1, 2]];\nconsole.log(campur[3][0]); // Output: 1\n</code></pre>"},{"location":"dasar/07-Array/#quiz-mini","title":"\ud83e\udde0 Quiz Mini","text":"<p>Apa output dari kode ini?</p> <pre><code>let binatang = [\"singa\", \"kuda\"];\nbinatang.push(\"gajah\");\nconsole.log(binatang.length);\n</code></pre> <ul> <li>A. 2  </li> <li>B. 3  </li> <li>C. \"gajah\"  </li> <li>D. Error</li> </ul> <p>\u2705 Jawaban: B. 3</p>"},{"location":"dasar/07-Array/#tantangan-coding","title":"\ud83d\udcaa Tantangan Coding","text":"<ol> <li>Buat array berisi 5 nama buah</li> <li>Tambahkan 1 buah baru ke akhir array</li> <li>Hapus buah pertama</li> <li>Cetak semua buah menggunakan <code>for...of</code></li> </ol> <p>Bonus: Tampilkan jumlah total buah setelah perubahan</p>"},{"location":"dasar/07-Array/#tips-tambahan","title":"\ud83e\udde0 Tips Tambahan","text":"<ul> <li>Gunakan array kalau kamu butuh simpan banyak data sejenis</li> <li>Hindari akses <code>array[-1]</code> karena index negatif gak valid (bukan Python \ud83d\ude05)</li> <li>Loop itu sahabat setia array, jangan lupa kenalan</li> </ul>"},{"location":"dasar/07-Array/#kembali-ke-daftar-materi","title":"\ud83d\udd01 Kembali ke Daftar Materi","text":"<p>```</p> <p>Next: Kita bisa lanjut ke Object \u2014 karena kadang data nggak cukup disimpan di array doang, kita butuh struktur yang lebih rapi dan bermakna. \ud83d\uddc2\ufe0f Mau lanjut ke file <code>08-object.md</code>? Bilang aja: \"Lanjut ke object!\" dan kita gaspol \ud83d\udca8</p>"},{"location":"dasar/08-Object/","title":"Object","text":"<p>Mantap Marno! Sekarang kita masuk ke Object \u2014 struktur data yang lebih keren dan fleksibel buat simpan data yang lebih kompleks. Ibarat kotak perhiasan yang bisa simpan berbagai jenis barang di dalamnya \u2728\ud83d\udc8d</p> <p>Berikut adalah isi lengkap untuk file: <code>D:\\dokumentasi\\javascript\\belajar-javascript-pemula\\docs\\dasar\\08-object.md</code></p> <pre><code># \ud83d\uddc2\ufe0f Object di JavaScript\n\n&gt; \"Kalau array itu warung makan, object itu lemari penyimpanan penuh barang.\" \u2014 Dev Serius\n\n---\n\n## \ud83c\udfaf Tujuan Pembelajaran\n\nDi akhir materi ini, kamu akan:\n- Memahami apa itu object\n- Bisa membuat object dengan properti dan method\n- Mengakses dan mengubah data dalam object\n- Kenal dengan konsep `this` dalam object\n\n---\n\n## \ud83d\udce6 Apa Itu Object?\n\nObject = kumpulan data yang lebih kompleks, terdiri dari **key (nama)** dan **value (nilai)**. Bisa berbagai tipe data, bahkan array atau fungsi!  \n\nObject ini penting banget karena sering dipakai untuk representasi data nyata, seperti `person`, `mobil`, atau `produk` dalam aplikasi.\n\n```javascript\nlet person = {\n  nama: \"Marno\",\n  umur: 22,\n  profesi: \"Mahasiswa\",\n  alamat: \"Malaysia\",\n};\nconsole.log(person);\n</code></pre>"},{"location":"dasar/08-Object/#mengakses-dan-mengubah-properti","title":"\ud83e\udded Mengakses dan Mengubah Properti","text":"<p>Untuk mengakses properti di object, kamu bisa pakai dot notation atau bracket notation.</p>"},{"location":"dasar/08-Object/#1-dot-notation","title":"1. Dot Notation","text":"<pre><code>console.log(person.nama);  // Output: Marno\nconsole.log(person.umur);  // Output: 22\n</code></pre>"},{"location":"dasar/08-Object/#2-bracket-notation","title":"2. Bracket Notation","text":"<pre><code>console.log(person[\"profesi\"]);  // Output: Mahasiswa\nconsole.log(person[\"alamat\"]);   // Output: Malaysia\n</code></pre>"},{"location":"dasar/08-Object/#menambah-dan-mengubah-properti","title":"\u270f\ufe0f Menambah dan Mengubah Properti","text":"<p>Kamu bisa menambah atau ubah properti dengan cara yang sama:</p> <pre><code>person.alamat = \"Kuala Lumpur\";   // Mengubah nilai alamat\nperson.email = \"marno@example.com\"; // Menambah properti email\n\nconsole.log(person.email);   // Output: marno@example.com\n</code></pre>"},{"location":"dasar/08-Object/#method-dalam-object","title":"\ud83d\udd27 Method dalam Object","text":"<p>Object bisa punya method, yaitu fungsi yang bekerja di dalam object. Biasanya buat ngelola data dalam object tersebut.</p> <pre><code>let mobil = {\n  merk: \"Toyota\",\n  tahun: 2020,\n  sapa: function() {\n    console.log(\"Halo, saya mobil \" + this.merk);\n  }\n};\n\nmobil.sapa(); // Output: Halo, saya mobil Toyota\n</code></pre> <p>Penjelasan: - <code>this</code> mengacu pada object tempat method itu dipanggil.</p>"},{"location":"dasar/08-Object/#this-dalam-object","title":"\ud83e\udde0 <code>this</code> dalam Object","text":"<p><code>this</code> di dalam object merujuk pada object itu sendiri.</p> <pre><code>let person = {\n  nama: \"Marno\",\n  sapa: function() {\n    console.log(\"Halo, \" + this.nama);\n  }\n};\n\nperson.sapa();  // Output: Halo, Marno\n</code></pre>"},{"location":"dasar/08-Object/#quiz-mini","title":"\ud83e\udde0 Quiz Mini","text":"<p>Apa output dari kode ini?</p> <pre><code>let laptop = {\n  brand: \"Lenovo\",\n  harga: 8000,\n  tampilkan: function() {\n    console.log(\"Laptop \" + this.brand + \" seharga \" + this.harga);\n  }\n};\nlaptop.tampilkan();\n</code></pre> <ul> <li>A. Laptop Lenovo seharga 8000</li> <li>B. Laptop Lenovo seharga undefined</li> <li>C. Error</li> <li>D. 8000</li> </ul> <p>\u2705 Jawaban: A. Laptop Lenovo seharga 8000</p>"},{"location":"dasar/08-Object/#tantangan-coding","title":"\ud83d\udcaa Tantangan Coding","text":"<ol> <li>Buat object <code>mobil</code> dengan properti <code>merk</code>, <code>tahun</code>, <code>warna</code>, dan <code>jenis</code></li> <li>Tambahkan method <code>deskripsi()</code> yang menampilkan info tentang mobil</li> <li>Panggil method <code>deskripsi()</code> dan pastikan tampil dengan benar</li> </ol>"},{"location":"dasar/08-Object/#tips-tambahan","title":"\ud83e\udde0 Tips Tambahan","text":"<ul> <li>Gunakan object kalau data yang kamu simpan melibatkan banyak atribut yang berhubungan</li> <li>Jangan lupa <code>this</code> saat membuat method di dalam object</li> <li>Object literal adalah cara tercepat bikin object: <code>{ key: value }</code></li> </ul>"},{"location":"dasar/08-Object/#kembali-ke-daftar-materi","title":"\ud83d\udd01 Kembali ke Daftar Materi","text":"<p>```</p> <p>Berikutnya kita bisa lanjut ke JSON (JavaScript Object Notation), yang sering banget dipakai buat kirim data antar aplikasi via API. Mau lanjut ke JSON atau ada materi lain yang ingin diperdalam? \ud83d\ude0e</p>"},{"location":"dasar/09-JSON/","title":"JSON","text":"<p>Oke, siap! Sekarang kita bahas JSON (JavaScript Object Notation) \u2014 format data yang sering banget dipakai untuk pertukaran data antar server dan aplikasi, terutama di web dan API \ud83c\udf10\ud83d\udcbb</p> <p>Berikut isi lengkap untuk file: <code>D:\\dokumentasi\\javascript\\belajar-javascript-pemula\\docs\\dasar\\09-json.md</code></p> <pre><code># \ud83c\udf10 JSON (JavaScript Object Notation)\n\n&gt; \"JSON itu kayak surat cinta buat aplikasi. Dibaca semua, dipahami, dikirim ke penerima.\" \u2014 Dev Pecinta Data\n\n---\n\n## \ud83c\udfaf Tujuan Pembelajaran\n\nDi akhir materi ini, kamu akan:\n- Mengerti apa itu JSON dan kenapa penting\n- Bisa mengubah JavaScript object ke JSON dan sebaliknya\n- Memahami penggunaan JSON dalam aplikasi web\n\n---\n\n## \ud83d\udce6 Apa Itu JSON?\n\nJSON adalah format teks yang digunakan untuk menyimpan dan mentransfer data. Data dalam JSON disusun dalam pasangan **key** dan **value**, mirip seperti object di JavaScript. Tapi JSON lebih sederhana dan sering digunakan untuk komunikasi antar server dan client.\n\nContoh JSON:\n\n```json\n{\n  \"nama\": \"Marno\",\n  \"umur\": 22,\n  \"profesi\": \"Mahasiswa\",\n  \"alamat\": \"Malaysia\"\n}\n</code></pre>"},{"location":"dasar/09-JSON/#mengubah-object-ke-json-stringify","title":"\ud83d\udd27 Mengubah Object ke JSON (Stringify)","text":"<p>Untuk mengubah object JavaScript menjadi string JSON, kita bisa pakai <code>JSON.stringify()</code>.</p> <pre><code>let person = {\n  nama: \"Marno\",\n  umur: 22,\n  profesi: \"Mahasiswa\"\n};\n\nlet jsonPerson = JSON.stringify(person);\nconsole.log(jsonPerson);\n</code></pre> <p>Output:</p> <pre><code>{\"nama\":\"Marno\",\"umur\":22,\"profesi\":\"Mahasiswa\"}\n</code></pre>"},{"location":"dasar/09-JSON/#mengubah-json-ke-object-parse","title":"\ud83d\udd04 Mengubah JSON ke Object (Parse)","text":"<p>Sebaliknya, untuk mengubah string JSON kembali ke object JavaScript, kita gunakan <code>JSON.parse()</code>.</p> <pre><code>let jsonPerson = '{\"nama\":\"Marno\",\"umur\":22,\"profesi\":\"Mahasiswa\"}';\nlet person = JSON.parse(jsonPerson);\n\nconsole.log(person.nama);   // Output: Marno\nconsole.log(person.umur);   // Output: 22\n</code></pre>"},{"location":"dasar/09-JSON/#keuntungan-menggunakan-json","title":"\ud83e\uddf0 Keuntungan Menggunakan JSON","text":"<ul> <li>Ringan: JSON menggunakan format yang sangat efisien untuk mentransfer data</li> <li>Kompatibilitas Tinggi: JSON didukung oleh banyak bahasa pemrograman</li> <li>Mudah Dibaca: Format JSON sangat mudah dipahami dan di-debug</li> </ul>"},{"location":"dasar/09-JSON/#quiz-mini","title":"\ud83e\udde0 Quiz Mini","text":"<p>Apa hasil dari kode ini?</p> <pre><code>let jsonStr = '{\"nama\":\"Putri\",\"usia\":25}';\nlet obj = JSON.parse(jsonStr);\nconsole.log(obj.usia);\n</code></pre> <ul> <li>A. Putri  </li> <li>B. 25  </li> <li>C. Error  </li> <li>D. undefined</li> </ul> <p>\u2705 Jawaban: B. 25</p>"},{"location":"dasar/09-JSON/#tantangan-coding","title":"\ud83d\udcaa Tantangan Coding","text":"<ol> <li>Buat object <code>produk</code> dengan properti <code>nama</code>, <code>harga</code>, dan <code>stok</code></li> <li>Ubah object <code>produk</code> jadi string JSON</li> <li>Ubah string JSON kembali jadi object dan tampilkan harga produk</li> </ol>"},{"location":"dasar/09-JSON/#tips-tambahan","title":"\ud83e\udde0 Tips Tambahan","text":"<ul> <li>JSON hanya mendukung tipe data dasar seperti string, number, object, array, dan boolean. </li> <li>JSON tidak mendukung function! Jadi, fungsi di dalam object tidak akan dipertahankan saat di-convert ke JSON.</li> <li>JSON juga tidak mendukung simbol dan <code>undefined</code>.</li> </ul>"},{"location":"dasar/09-JSON/#kembali-ke-daftar-materi","title":"\ud83d\udd01 Kembali ke Daftar Materi","text":"<p>```</p> <p>Sekarang kita sudah masuk ke dunia JSON! Dengan ini, kamu bisa mulai menghubungkan aplikasi JavaScript dengan server atau API menggunakan format data ini. Selanjutnya, kita bisa masuk ke Asynchronous JavaScript, yaitu cara untuk menangani operasi yang butuh waktu lama, kayak fetching data dari API \ud83d\udd51\ud83d\ude80</p> <p>Mau lanjut ke materi Asynchronous JavaScript atau ada topik lainnya yang ingin dikejar? \ud83d\ude0e</p>"},{"location":"dasar/10-Type-Casting/","title":"Type Casting","text":"<p>Langsung kita gas, bro! Kali ini kita bahas topik yang sering bikin pemula bengong: Type Casting di JavaScript \u2014 alias cara nyulap satu tipe data jadi tipe lain. \u26a1</p> <p>Berikut isi lengkap untuk file: <code>D:\\dokumentasi\\javascript\\belajar-javascript-pemula\\docs\\dasar\\10-Type-Casting.md</code></p> <pre><code># \ud83d\udd04 Type Casting di JavaScript\n\n&gt; \u201cKalau hidup bisa berubah, kenapa tipe data nggak? \ud83d\ude0e\u201d  \n&gt; Yup, di JavaScript, semua bisa berubah\u2026 asal kamu paham cara casting-nya!\n\n---\n\n## \ud83c\udfaf Tujuan Pembelajaran\n\nSetelah membaca materi ini, kamu akan:\n- Mengerti perbedaan antara type casting **implisit** dan **eksplisit**\n- Bisa mengubah tipe data dari string ke number, boolean, dan sebaliknya\n- Tahu trik-trik casting yang sering digunakan di JavaScript\n\n---\n\n## \ud83e\udde0 Apa Itu Type Casting?\n\n**Type casting** adalah proses mengubah satu tipe data ke tipe lain.\n\nContoh:\n```javascript\nlet angka = \"42\";\nlet hasil = Number(angka); // dari string ke number\n</code></pre>"},{"location":"dasar/10-Type-Casting/#1-implicit-type-casting-coercion","title":"1\ufe0f\u20e3 Implicit Type Casting (Coercion)","text":"<p>JavaScript kadang otomatis ubah tipe data saat dibutuhkan.</p> <p>Contoh:</p> <pre><code>let hasil = \"5\" * 2;    // hasil: 10 \u2192 \"5\" diubah jadi number\nlet gabung = \"5\" + 2;   // hasil: \"52\" \u2192 angka diubah jadi string\n</code></pre> <p>\u26a0\ufe0f Hati-hati! <code>+</code> bisa berarti penjumlahan atau penggabungan string.</p>"},{"location":"dasar/10-Type-Casting/#2-explicit-type-casting","title":"2\ufe0f\u20e3 Explicit Type Casting","text":"<p>Kamu ubah tipe data secara langsung pakai fungsi:</p>"},{"location":"dasar/10-Type-Casting/#string-number","title":"\u27a1\ufe0f String \u2192 Number","text":"<pre><code>Number(\"42\");        // 42\nparseInt(\"42px\");    // 42\nparseFloat(\"3.14\");  // 3.14\n</code></pre>"},{"location":"dasar/10-Type-Casting/#number-string","title":"\u27a1\ufe0f Number \u2192 String","text":"<pre><code>String(42);          // \"42\"\n(42).toString();     // \"42\"\n</code></pre>"},{"location":"dasar/10-Type-Casting/#boolean-string-number","title":"\u27a1\ufe0f Boolean \u2192 String / Number","text":"<pre><code>String(true);        // \"true\"\nNumber(false);       // 0\n</code></pre>"},{"location":"dasar/10-Type-Casting/#string-number-boolean","title":"\u27a1\ufe0f String / Number \u2192 Boolean","text":"<pre><code>Boolean(\"halo\");     // true\nBoolean(\"\");         // false\nBoolean(1);          // true\nBoolean(0);          // false\n</code></pre>"},{"location":"dasar/10-Type-Casting/#trik-cepat-type-casting","title":"\ud83d\udd25 Trik Cepat Type Casting","text":""},{"location":"dasar/10-Type-Casting/#1-ke-boolean","title":"1. <code>!!</code> \u2192 ke Boolean","text":"<pre><code>!!\"halo\";     // true\n!!0;          // false\n</code></pre>"},{"location":"dasar/10-Type-Casting/#2-ke-number","title":"2. <code>+</code> \u2192 ke Number","text":"<pre><code>+\"123\";       // 123\n+\"3.14\";      // 3.14\n</code></pre>"},{"location":"dasar/10-Type-Casting/#3-template-literal-atau-ke-string","title":"3. Template literal atau <code>\"\" +</code> \u2192 ke String","text":"<pre><code>\"\" + 123;     // \"123\"\n`${true}`;    // \"true\"\n</code></pre>"},{"location":"dasar/10-Type-Casting/#cek-tipe-data","title":"\ud83e\uddea Cek Tipe Data","text":"<p>Pakai <code>typeof</code> buat ngecek hasil casting:</p> <pre><code>let hasil = Number(\"123\");\nconsole.log(typeof hasil); // \"number\"\n</code></pre>"},{"location":"dasar/10-Type-Casting/#quiz-mini","title":"\ud83e\udde0 Quiz Mini","text":"<p>Apa hasil dari:</p> <pre><code>let x = \"5\";\nlet y = 2;\nlet z = x + y;\n</code></pre> <ul> <li>A. 7  </li> <li>B. \"7\"  </li> <li>C. \"52\"  </li> <li>D. Error</li> </ul> <p>\u2705 Jawaban: C. <code>\"52\"</code> Karena <code>+</code> digunakan, jadi string \"5\" + 2 di-coerce jadi string.</p>"},{"location":"dasar/10-Type-Casting/#tantangan-coding","title":"\ud83d\udcaa Tantangan Coding","text":"<ol> <li>Buat fungsi yang menerima input string angka dan mengembalikan hasil perkalian setelah dikonversi ke number.</li> <li>Konversikan array angka <code>[1, 2, 3]</code> ke string <code>\"1,2,3\"</code> dan kembali ke array.</li> <li>Cek apakah input user bisa dikonversi ke number dengan aman (<code>!isNaN(Number(input))</code>).</li> </ol>"},{"location":"dasar/10-Type-Casting/#tips-ngebut","title":"\u26a0\ufe0f Tips Ngebut","text":"<ul> <li>Jangan campur-campur string dan number kalau bisa dihindari.</li> <li>Selalu cek hasil <code>typeof</code> saat ngoding logic penting.</li> <li>Pakai <code>Number()</code>, <code>String()</code>, dan <code>Boolean()</code> biar jelas dan eksplisit.</li> </ul>"},{"location":"dasar/10-Type-Casting/#kembali-ke-daftar-materi","title":"\ud83d\udd01 Kembali ke Daftar Materi","text":"<p>```</p> <p>Udah makin jago nih kamu, Marno! \ud83d\udd25 Abis ini kita bisa lanjut ke null vs undefined, operator perbandingan, atau truthy &amp; falsy values. Mau lanjut ke mana, bosku?</p>"},{"location":"dasar/11-Data-Structures/","title":"11 Data Structures","text":"<p>Let's gooo~ \ud83d\ude80 Kali ini kita masuk ke topik yang mulai kerasa \"berisi banget\": Struktur Data atau Data Structures di JavaScript. Ini penting banget buat ngatur, simpan, dan ngolah data \u2014 biar hidup ngoding lo nggak berantakan kayak lemari kontrakan \ud83d\ude06</p> <p>Berikut isi lengkap file: <code>D:\\dokumentasi\\javascript\\belajar-javascript-pemula\\docs\\dasar\\11-Data-Structures.md</code></p> <pre><code># \ud83e\uddf1 Struktur Data di JavaScript\n\n&gt; \u201cKoding tanpa struktur data tuh kayak sawit tanpa kebun\u2014nggak ada tempatnya!\u201d \ud83c\udf34\n\n---\n\n## \ud83c\udfaf Tujuan Pembelajaran\n\nSetelah membaca ini, kamu akan:\n- Mengenal struktur data dasar di JavaScript\n- Mengerti kapan dan bagaimana menggunakannya\n- Bisa menyimpan dan mengakses data dengan lebih efisien\n\n---\n\n## \ud83d\udce6 Apa Itu Struktur Data?\n\nStruktur data adalah **cara menyimpan dan mengorganisasi data** agar mudah diakses dan dimodifikasi.\n\nDi JavaScript, struktur data dasarnya meliputi:\n\n- **Array**\n- **Object**\n- (bonus) **Map** &amp; **Set** \u2014 dibahas singkat\n\n---\n\n## 1\ufe0f\u20e3 Array: Kumpulan Data Berurutan\n\nArray adalah list (daftar) yang bisa berisi apa aja: string, number, bahkan array lain.\n\n```javascript\nlet buah = [\"apel\", \"mangga\", \"durian\"];\nconsole.log(buah[1]); // \"mangga\"\n</code></pre>"},{"location":"dasar/11-Data-Structures/#operasi-umum","title":"Operasi Umum:","text":"<pre><code>buah.push(\"pisang\");    // tambah di akhir\nbuah.pop();             // hapus dari akhir\nbuah.shift();           // hapus dari awal\nbuah.unshift(\"jeruk\");  // tambah di awal\n</code></pre>"},{"location":"dasar/11-Data-Structures/#looping-array","title":"Looping Array:","text":"<pre><code>for (let item of buah) {\n  console.log(item);\n}\n</code></pre>"},{"location":"dasar/11-Data-Structures/#2-object-data-dengan-label","title":"2\ufe0f\u20e3 Object: Data dengan Label","text":"<p>Object menyimpan data dalam format key-value.</p> <pre><code>let pekerja = {\n  nama: \"Marno\",\n  umur: 21,\n  asal: \"Indonesia\"\n};\n\nconsole.log(pekerja.nama); // \"Marno\"\nconsole.log(pekerja[\"umur\"]); // 21\n</code></pre>"},{"location":"dasar/11-Data-Structures/#menambah-ubah-properti","title":"Menambah / Ubah Properti:","text":"<pre><code>pekerja.email = \"marno@example.com\";\npekerja.umur = 22;\n</code></pre>"},{"location":"dasar/11-Data-Structures/#3-map-object-tapi-lebih-rapi","title":"3\ufe0f\u20e3 Map: Object Tapi Lebih Rapi","text":"<p><code>Map</code> adalah alternatif object, cocok kalau kunci-nya bukan cuma string.</p> <pre><code>let map = new Map();\nmap.set(\"nama\", \"Marno\");\nmap.set(\"usia\", 21);\n\nconsole.log(map.get(\"nama\")); // \"Marno\"\n</code></pre> <p>Keunggulan <code>Map</code>: - Bisa pakai tipe data apa saja sebagai key - Tetap urutan - Ukuran bisa dicek dengan <code>.size</code></p>"},{"location":"dasar/11-Data-Structures/#4-set-kumpulan-data-unik","title":"4\ufe0f\u20e3 Set: Kumpulan Data Unik","text":"<p><code>Set</code> adalah kumpulan data tanpa duplikat.</p> <pre><code>let setBuah = new Set();\nsetBuah.add(\"apel\");\nsetBuah.add(\"apel\"); // diabaikan karena sudah ada\nsetBuah.add(\"mangga\");\n\nconsole.log(setBuah); // Set { \"apel\", \"mangga\" }\n</code></pre>"},{"location":"dasar/11-Data-Structures/#kapan-pakai-apa","title":"\ud83d\udd0d Kapan Pakai Apa?","text":"Kebutuhan Struktur Data Data berurutan Array Data dengan label Object Butuh key yang bukan string Map Butuh data tanpa duplikat Set"},{"location":"dasar/11-Data-Structures/#quiz-mini","title":"\ud83e\udde0 Quiz Mini","text":"<p>Apa output dari kode berikut?</p> <pre><code>let angka = [1, 2, 3];\nangka.push(4);\nconsole.log(angka[3]);\n</code></pre> <ul> <li>A. 3  </li> <li>B. 4  </li> <li>C. undefined  </li> <li>D. Error</li> </ul> <p>\u2705 Jawaban: B. <code>4</code></p>"},{"location":"dasar/11-Data-Structures/#tantangan-coding","title":"\ud83d\udcaa Tantangan Coding","text":"<ol> <li>Buat object <code>sawit</code> dengan properti <code>luas</code>, <code>lokasi</code>, dan <code>jumlahPohon</code>.</li> <li>Buat array dari nama-nama pekerja dan tampilkan semuanya pakai <code>for...of</code>.</li> <li>Gunakan <code>Set</code> untuk menyimpan data blok kebun tanpa duplikat.</li> </ol>"},{"location":"dasar/11-Data-Structures/#tips-pro","title":"\u26a0\ufe0f Tips Pro","text":"<ul> <li>Array cocok buat daftar yang diakses berdasarkan urutan (index).</li> <li>Object cocok buat data yang punya label/nama (key).</li> <li>Map lebih fleksibel daripada object, tapi belum selalu dibutuhkan di awal.</li> <li>Gunakan Set saat kamu butuh memastikan data unik.</li> </ul>"},{"location":"dasar/11-Data-Structures/#kembali-ke-daftar-materi","title":"\ud83d\udd01 Kembali ke Daftar Materi","text":"<p>```</p> <p>Sip, satu langkah lebih deket jadi JavaScript Jagoan \ud83d\udcaa Mau lanjut ke null &amp; undefined, atau langsung ke function lanjutan atau mungkin eksplor Map &amp; Set lebih dalam? Kasih kode aja, bro \ud83d\ude0e</p>"},{"location":"dasar/12-Equality-Comparisons/","title":"12 Equality Comparisons","text":"<p>Siap, boskuu! Sekarang kita masuk ke topik yang sering bikin galau developer: Perbandingan (Equality) di JavaScript \u2014 alias si <code>==</code> dan <code>===</code> yang kelihatannya mirip tapi kelakuannya beda banget \ud83e\udd2f</p> <p>Berikut isi lengkap file: <code>D:\\dokumentasi\\javascript\\belajar-javascript-pemula\\docs\\dasar\\12-Equality-Comparisons.md</code></p> <pre><code># \ud83e\udd1d Perbandingan Nilai (Equality) di JavaScript\n\n&gt; \u201cKelihatannya sama, tapi ternyata beda. Kayak dia pas udah punya yang lain \ud83d\ude14\u201d\n\n---\n\n## \ud83c\udfaf Tujuan Pembelajaran\n\nSetelah membaca ini, kamu akan:\n- Mengerti perbedaan `==` dan `===`\n- Tahu cara membandingkan nilai dengan benar\n- Terhindar dari jebakan type coercion\n\n---\n\n## \ud83e\udde0 Apa Itu Equality Comparison?\n\nPerbandingan adalah cara untuk mengecek apakah dua nilai itu **sama** atau **tidak**.\n\nDi JavaScript, ada dua operator utama:\n\n| Operator | Nama                    | Perbandingan |\n|----------|-------------------------|--------------|\n| `==`     | Loose Equality          | Membandingkan setelah konversi tipe (coercion) |\n| `===`    | Strict Equality         | Membandingkan nilai dan tipe secara ketat |\n\n---\n\n## \u2696\ufe0f Contoh `==` (Loose Equality)\n\n```javascript\n5 == \"5\";         // true\n0 == false;       // true\n\"\" == false;      // true\nnull == undefined;// true\n</code></pre> <p>\u26a0\ufe0f Tapi ini bisa jadi bahaya karena JavaScript otomatis konversi tipe!</p>"},{"location":"dasar/12-Equality-Comparisons/#contoh-strict-equality","title":"\ud83e\uddf1 Contoh <code>===</code> (Strict Equality)","text":"<pre><code>5 === \"5\";        // false\n0 === false;      // false\n\"\" === false;     // false\nnull === undefined; // false\n</code></pre> <p>\u2705 Lebih aman karena tidak ada coercion!</p>"},{"location":"dasar/12-Equality-Comparisons/#jangan-terjebak-coercion","title":"\ud83d\udea8 Jangan Terjebak Coercion!","text":"<p>Contoh jebakan maut:</p> <pre><code>\"0\" == false   // true\n[] == false    // true\n[] == 0        // true\n\"\" == 0        // true\n</code></pre> <p>Tapi:</p> <pre><code>[] === false   // false\n[] === 0       // false\n</code></pre>"},{"location":"dasar/12-Equality-Comparisons/#perbandingan-dengan-object-array-dan-function","title":"\ud83e\uddea Perbandingan dengan <code>Object</code>, <code>Array</code>, dan <code>Function</code>","text":"<p>Semua referensi objek dibandingkan berdasarkan referensi (alamat memori), bukan isi!</p> <pre><code>[] == []            // false\n{} == {}            // false\n\nlet a = [];\nlet b = a;\na == b              // true\n</code></pre>"},{"location":"dasar/12-Equality-Comparisons/#best-practice","title":"\u2705 Best Practice","text":"<ul> <li>Selalu gunakan <code>===</code> dan <code>!==</code> </li> <li>Gunakan <code>==</code> hanya jika kamu benar-benar tahu yang kamu lakukan</li> <li>Hati-hati membandingkan nilai falsy seperti <code>0</code>, <code>\"\"</code>, <code>null</code>, dan <code>undefined</code></li> </ul>"},{"location":"dasar/12-Equality-Comparisons/#quiz-mini","title":"\ud83e\udde0 Quiz Mini","text":"<p>Apa hasil dari:</p> <pre><code>false == \"0\"\n</code></pre> <ul> <li>A. true  </li> <li>B. false  </li> <li>C. Error  </li> <li>D. undefined</li> </ul> <p>\u2705 Jawaban: A. <code>true</code> Karena keduanya di-coerce ke number 0.</p>"},{"location":"dasar/12-Equality-Comparisons/#tantangan-coding","title":"\ud83d\udcaa Tantangan Coding","text":"<ol> <li>Buat dua variabel <code>a = 5</code> dan <code>b = \"5\"</code>, bandingkan dengan <code>==</code> dan <code>===</code></li> <li>Bandingkan array kosong <code>[]</code> dengan <code>false</code> dan cek hasilnya.</li> <li>Buat object <code>user1</code> dan <code>user2</code> dengan isi yang sama, lalu bandingkan. Kenapa hasilnya <code>false</code>?</li> </ol>"},{"location":"dasar/12-Equality-Comparisons/#tips-pro","title":"\ud83e\udd13 Tips Pro","text":"<ul> <li>Gunakan <code>Object.is()</code> jika kamu butuh banding lebih ketat dari <code>===</code></li> <li>Pahami nilai falsy di JS: <code>0</code>, <code>\"\"</code>, <code>null</code>, <code>undefined</code>, <code>NaN</code>, <code>false</code></li> </ul>"},{"location":"dasar/12-Equality-Comparisons/#ingat","title":"\ud83e\udde0 Ingat!","text":"Ekspresi Hasil dengan <code>==</code> Hasil dengan <code>===</code> <code>5 == \"5\"</code> true false <code>null == undefined</code> true false <code>[] == false</code> true false <code>0 == false</code> true false"},{"location":"dasar/12-Equality-Comparisons/#kembali-ke-daftar-materi","title":"\ud83d\udd01 Kembali ke Daftar Materi","text":"<p>```</p> <p>Gimana? Udah nggak tertipu <code>==</code> vs <code>===</code> lagi kan? \ud83d\ude0e Kalau kamu mau lanjut, kita bisa bahas tentang Truthy &amp; Falsy, Operator Logika, atau masuk ke Control Flow yang lebih dalam. Kasih komando aja, komandan \ud83e\udee1</p>"},{"location":"dasar/13-Loops-and-Iterations/","title":"Loops and Iterations","text":"<p>Siap, bro! Kali ini kita gaskeun ke materi yang sering dipakai buat ngulang-ngulang proses secara otomatis \u2014 alias Loops and Iterations \ud83d\udd01</p> <p>Berikut isi lengkap file: <code>D:\\dokumentasi\\javascript\\belajar-javascript-pemula\\docs\\dasar\\13-Loops-and-Iterations.md</code></p> <pre><code># \ud83d\udd01 Loops &amp; Iterasi di JavaScript\n\n&gt; \u201cNgoding tanpa loop itu kayak panen sawit manual\u2014capek, lambat, dan bikin nangis \ud83d\ude2d\u201d\n\n---\n\n## \ud83c\udfaf Tujuan Pembelajaran\n\nSetelah belajar ini, kamu akan:\n- Memahami konsep pengulangan (loop)\n- Menggunakan berbagai macam loop di JavaScript\n- Menentukan loop yang tepat untuk tiap kasus\n\n---\n\n## \ud83e\udde0 Apa Itu Loop?\n\nLoop adalah cara untuk menjalankan perintah **berulang kali** tanpa harus menulis kode yang sama berkali-kali.\n\n---\n\n## \ud83d\udd04 1. `for` Loop\n\nLoop klasik. Punya tiga bagian: inisialisasi, kondisi, dan increment.\n\n```javascript\nfor (let i = 0; i &lt; 5; i++) {\n  console.log(\"Iterasi ke-\" + i);\n}\n</code></pre>"},{"location":"dasar/13-Loops-and-Iterations/#2-while-loop","title":"\ud83d\udd01 2. <code>while</code> Loop","text":"<p>Loop yang akan terus berjalan selama kondisinya true.</p> <pre><code>let i = 0;\nwhile (i &lt; 5) {\n  console.log(\"While ke-\" + i);\n  i++;\n}\n</code></pre>"},{"location":"dasar/13-Loops-and-Iterations/#3-dowhile-loop","title":"\ud83d\udd02 3. <code>do...while</code> Loop","text":"<p>Mirip <code>while</code>, tapi dijamin berjalan minimal 1 kali.</p> <pre><code>let i = 0;\ndo {\n  console.log(\"Do While ke-\" + i);\n  i++;\n} while (i &lt; 5);\n</code></pre>"},{"location":"dasar/13-Loops-and-Iterations/#4-forof-loop","title":"\ud83e\udded 4. <code>for...of</code> Loop","text":"<p>Loop untuk array atau iterable object.</p> <pre><code>let buah = [\"apel\", \"pisang\", \"mangga\"];\nfor (let item of buah) {\n  console.log(item);\n}\n</code></pre>"},{"location":"dasar/13-Loops-and-Iterations/#5-forin-loop","title":"\ud83d\uddc2\ufe0f 5. <code>for...in</code> Loop","text":"<p>Loop untuk object properties (key).</p> <pre><code>let pekerja = { nama: \"Marno\", umur: 21, asal: \"Malaysia\" };\nfor (let key in pekerja) {\n  console.log(key + \": \" + pekerja[key]);\n}\n</code></pre>"},{"location":"dasar/13-Loops-and-Iterations/#break-continue","title":"\ud83d\udea8 Break &amp; Continue","text":"<ul> <li><code>break</code> \u2192 keluar dari loop</li> <li><code>continue</code> \u2192 skip iterasi saat ini, lanjut ke berikutnya</li> </ul> <pre><code>for (let i = 1; i &lt;= 5; i++) {\n  if (i === 3) continue;\n  console.log(i);\n}\n// Output: 1, 2, 4, 5\n</code></pre>"},{"location":"dasar/13-Loops-and-Iterations/#kapan-gunakan-yang-mana","title":"\u2705 Kapan Gunakan Yang Mana?","text":"Kebutuhan Gunakan Loop berdasarkan jumlah pasti <code>for</code> Loop sampai kondisi berhenti <code>while</code> Loop minimal sekali jalan <code>do...while</code> Loop isi array/list <code>for...of</code> Loop property dalam object <code>for...in</code>"},{"location":"dasar/13-Loops-and-Iterations/#quiz-mini","title":"\ud83e\udde0 Quiz Mini","text":"<p>Berapa kali loop ini jalan?</p> <pre><code>let i = 5;\ndo {\n  console.log(i);\n  i++;\n} while (i &lt; 5);\n</code></pre> <ul> <li>A. 0  </li> <li>B. 1  </li> <li>C. 5  </li> <li>D. Infinite Loop</li> </ul> <p>\u2705 Jawaban: B. 1 Karena <code>do...while</code> akan jalan dulu baru cek kondisi.</p>"},{"location":"dasar/13-Loops-and-Iterations/#tantangan-coding","title":"\ud83d\udcaa Tantangan Coding","text":"<ol> <li>Print angka ganjil dari 1 sampai 20 pakai <code>for</code>.</li> <li>Loop array pekerja dan print semua nama.</li> <li>Loop object data panen dan tampilkan semua key dan value.</li> </ol>"},{"location":"dasar/13-Loops-and-Iterations/#tips-pro","title":"\ud83e\udde0 Tips Pro","text":"<ul> <li>Hindari infinite loop (loop yang nggak pernah berhenti) \u2014 bisa hang browser!</li> <li>Gunakan <code>forEach</code>, <code>map</code>, dan method array modern saat sudah paham dasar loop</li> </ul>"},{"location":"dasar/13-Loops-and-Iterations/#kembali-ke-daftar-materi","title":"\ud83d\udd01 Kembali ke Daftar Materi","text":"<p>```</p> <p>Siip~ dengan ini kamu udah paham looping dasar di JavaScript. Kalau mau lanjut, kita bisa bahas <code>Array.prototype.map</code>, <code>filter</code>, <code>reduce</code>, atau langsung ke asynchronous loop kayak <code>for await...of</code>. Tinggal bilang aja yaa \ud83d\ude80</p>"},{"location":"dasar/14-Expressions-and-Operators/","title":"Expressions and Operators","text":"<p>Mantap, sekarang kita masuk ke inti dapurnya JavaScript: Ekspresi dan Operator! Ibaratnya ini senjata utama buat ngolah data dan bikin program bisa mikir \ud83d\udca5\ud83e\udde0</p> <p>Berikut isi lengkap file: <code>D:\\dokumentasi\\javascript\\belajar-javascript-pemula\\docs\\dasar\\14-Expressions-and-Operators.md</code></p> <pre><code># \ud83e\uddee Expressions dan Operators di JavaScript\n\n&gt; \u201cJavaScript tanpa operator ibarat sawit tanpa dodos \u2014 nggak bisa panen cuy!\u201d\n\n---\n\n## \ud83c\udfaf Tujuan Pembelajaran\n\nSetelah mempelajari ini, kamu akan:\n- Paham apa itu ekspresi\n- Tahu berbagai jenis operator di JavaScript\n- Bisa ngoperasikan nilai dan logika dalam kode\n\n---\n\n## \ud83e\udde0 Apa Itu Ekspresi?\n\nEkspresi adalah **kombinasi nilai, variabel, dan operator** yang menghasilkan sebuah nilai.\n\nContoh:\n\n```javascript\n5 + 3       // ekspresi dengan hasil 8\na * 10      // hasil tergantung nilai a\ntrue &amp;&amp; false // ekspresi boolean\n</code></pre>"},{"location":"dasar/14-Expressions-and-Operators/#jenis-jenis-operator","title":"\ud83d\udd27 Jenis-Jenis Operator","text":""},{"location":"dasar/14-Expressions-and-Operators/#1-operator-aritmatika","title":"1. \ud83e\uddee Operator Aritmatika","text":"<p>Digunakan untuk operasi matematika dasar.</p> Operator Nama Contoh <code>+</code> Penjumlahan <code>5 + 2</code> = 7 <code>-</code> Pengurangan <code>5 - 2</code> = 3 <code>*</code> Perkalian <code>5 * 2</code> = 10 <code>/</code> Pembagian <code>5 / 2</code> = 2.5 <code>%</code> Modulus <code>5 % 2</code> = 1 <code>**</code> Eksponen <code>2 ** 3</code> = 8"},{"location":"dasar/14-Expressions-and-Operators/#2-operator-penugasan","title":"2. \ud83d\udff0 Operator Penugasan","text":"<p>Untuk mengisi atau mengubah nilai variabel.</p> <pre><code>let x = 10;\nx += 5;  // x = x + 5 \u2192 15\nx *= 2;  // x = x * 2 \u2192 30\n</code></pre>"},{"location":"dasar/14-Expressions-and-Operators/#3-operator-perbandingan","title":"3. \ud83d\udd0d Operator Perbandingan","text":"<p>Digunakan untuk membandingkan dua nilai.</p> Operator Arti <code>==</code> Sama nilai (longgar) <code>===</code> Sama nilai dan tipe (ketat) <code>!=</code> Tidak sama nilai <code>!==</code> Tidak sama nilai atau tipe <code>&gt;</code> Lebih besar <code>&lt;</code> Lebih kecil <code>&gt;=</code> Lebih besar atau sama <code>&lt;=</code> Lebih kecil atau sama"},{"location":"dasar/14-Expressions-and-Operators/#4-operator-logika","title":"4. \u2699\ufe0f Operator Logika","text":"<p>Digunakan untuk logika boolean.</p> Operator Nama Contoh <code>&amp;&amp;</code> AND <code>true &amp;&amp; true</code> <code>||</code> OR <code>true || false</code> <code>!</code> NOT <code>!true</code> = false"},{"location":"dasar/14-Expressions-and-Operators/#5-operator-string","title":"5. \ud83d\udce6 Operator String","text":"<pre><code>\"halo\" + \" dunia\" // \"halo dunia\"\n</code></pre> <p>Kalau kamu <code>+</code> antara string dan angka, angka akan diubah jadi string:</p> <pre><code>\"hasil: \" + 10 // \"hasil: 10\"\n</code></pre>"},{"location":"dasar/14-Expressions-and-Operators/#6-operator-tipe","title":"6. \ud83d\udc65 Operator Tipe","text":"<pre><code>typeof 123      // \"number\"\ntypeof \"hello\"  // \"string\"\ntypeof true     // \"boolean\"\ntypeof {}       // \"object\"\n</code></pre>"},{"location":"dasar/14-Expressions-and-Operators/#7-ternary-operator","title":"7. \u2753 Ternary Operator","text":"<p>Operator kondisional singkat.</p> <pre><code>let hasil = (nilai &gt;= 75) ? \"Lulus\" : \"Gagal\";\n</code></pre>"},{"location":"dasar/14-Expressions-and-Operators/#ekspresi-vs-pernyataan","title":"\ud83e\udde0 Ekspresi vs Pernyataan","text":"<ul> <li>Ekspresi: Menghasilkan nilai  </li> <li>Pernyataan (Statement): Melakukan aksi</li> </ul> <p>Contoh ekspresi:</p> <pre><code>5 + 3\nnama === \"Marno\"\n</code></pre> <p>Contoh pernyataan:</p> <pre><code>if (nilai &gt; 80) {\n  console.log(\"Bagus!\");\n}\n</code></pre>"},{"location":"dasar/14-Expressions-and-Operators/#tantangan-coding","title":"\ud83d\udcaa Tantangan Coding","text":"<ol> <li>Buat ekspresi untuk menghitung luas persegi panjang.</li> <li>Coba gunakan <code>typeof</code> pada string, boolean, dan array.</li> <li>Gunakan ternary operator untuk menentukan hasil lulus/gagal.</li> </ol>"},{"location":"dasar/14-Expressions-and-Operators/#kembali-ke-daftar-materi","title":"\ud83d\udd01 Kembali ke Daftar Materi","text":"<p>```</p> <p>Kalau udah paham ini, kamu udah bisa \"ngoding mikir\" \ud83d\udca1 Next kita bisa lanjut ke topik seru kayak Error Handling, Asynchronous JavaScript (Promise &amp; async/await), atau DOM Manipulation. Tinggal bilang, bro! \ud83e\udde0\u26a1</p>"},{"location":"dasar/15-Control-flow/","title":"15 Control flow","text":"<p>Oke bro, saatnya kita bahas fondasi penting dalam alur logika program: Control Flow Alias... gimana caranya bikin program lo bisa \"milih jalan hidupnya sendiri\" \ud83e\udde0\ud83d\udee3\ufe0f</p> <p>Berikut isi lengkap file: <code>D:\\dokumentasi\\javascript\\belajar-javascript-pemula\\docs\\dasar\\15-Control-flow.md</code></p> <pre><code># \ud83e\udded Control Flow di JavaScript\n\n&gt; \"Control flow tuh ibarat rambu lalu lintas buat kode\u2014tanpa itu, semua bakal kacau balau \ud83d\ude35\u200d\ud83d\udcab\"\n\n---\n\n## \ud83c\udfaf Tujuan Pembelajaran\n\nSetelah mempelajari ini, kamu akan:\n- Memahami cara program mengambil keputusan\n- Menggunakan `if`, `else`, `switch`, dan ternary operator\n- Mengontrol alur program berdasarkan kondisi\n\n---\n\n## \ud83d\udd00 Apa Itu Control Flow?\n\nControl flow adalah **urutan eksekusi perintah** dalam program. Dengan control flow, kita bisa:\n\n- Menentukan kondisi\n- Menjalankan kode tertentu saat kondisi terpenuhi\n- Mengabaikan bagian lain saat kondisi tidak terpenuhi\n\n---\n\n## \ud83e\uddf1 1. `if` Statement\n\n```javascript\nlet cuaca = \"hujan\";\n\nif (cuaca === \"hujan\") {\n  console.log(\"Bawa payung!\");\n}\n</code></pre>"},{"location":"dasar/15-Control-flow/#2-ifelse","title":"\ud83d\udd04 2. <code>if...else</code>","text":"<pre><code>let nilai = 70;\n\nif (nilai &gt;= 75) {\n  console.log(\"Lulus!\");\n} else {\n  console.log(\"Gagal!\");\n}\n</code></pre>"},{"location":"dasar/15-Control-flow/#3-else-if","title":"\ud83e\udde9 3. <code>else if</code>","text":"<pre><code>let nilai = 85;\n\nif (nilai &gt;= 90) {\n  console.log(\"A\");\n} else if (nilai &gt;= 80) {\n  console.log(\"B\");\n} else if (nilai &gt;= 70) {\n  console.log(\"C\");\n} else {\n  console.log(\"D\");\n}\n</code></pre>"},{"location":"dasar/15-Control-flow/#4-ternary-operator","title":"\ud83d\udd18 4. Ternary Operator","text":"<p>Singkatan dari <code>if...else</code> yang ringkas.</p> <pre><code>let usia = 18;\nlet status = (usia &gt;= 17) ? \"Dewasa\" : \"Remaja\";\n</code></pre>"},{"location":"dasar/15-Control-flow/#5-switch-statement","title":"\ud83d\uddc2\ufe0f 5. <code>switch</code> Statement","text":"<p>Cocok untuk banyak kondisi yang berdasarkan 1 variabel.</p> <pre><code>let hari = \"Senin\";\n\nswitch (hari) {\n  case \"Senin\":\n    console.log(\"Awal minggu\");\n    break;\n  case \"Jumat\":\n    console.log(\"Hampir weekend\");\n    break;\n  default:\n    console.log(\"Hari biasa\");\n}\n</code></pre> <p>Jangan lupa <code>break</code>, kalau enggak, dia bakal lanjut ke case selanjutnya!</p>"},{"location":"dasar/15-Control-flow/#tips-penting","title":"\u2757 Tips Penting","text":"<ul> <li>Pakai <code>switch</code> untuk banyak cabang nilai dari satu variabel</li> <li>Pakai <code>if</code> untuk kondisi kompleks atau pakai operator logika</li> <li>Gunakan ternary kalau kondisi dan aksi-nya pendek</li> </ul>"},{"location":"dasar/15-Control-flow/#quiz-mini","title":"\ud83e\udde0 Quiz Mini","text":"<pre><code>let skor = 65;\nlet hasil = (skor &gt;= 70) ? \"Lulus\" : \"Remedial\";\nconsole.log(hasil);\n</code></pre> <p>Apa output dari kode di atas?</p> <p>\u2705 Jawaban: <code>\"Remedial\"</code></p>"},{"location":"dasar/15-Control-flow/#tantangan-coding","title":"\ud83d\udcaa Tantangan Coding","text":"<ol> <li>Buat kode yang mengecek apakah suatu angka genap atau ganjil.</li> <li>Gunakan <code>switch</code> untuk mencetak nama hari berdasarkan angka (1 = Senin, 7 = Minggu).</li> <li>Pakai <code>if else</code> untuk menentukan kategori usia:</li> <li>&lt; 13: Anak-anak</li> <li>&lt; 18: Remaja</li> <li> <p>= 18: Dewasa</p> </li> </ol>"},{"location":"dasar/15-Control-flow/#kembali-ke-daftar-materi","title":"\ud83d\udd01 Kembali ke Daftar Materi","text":"<p>```</p> <p>Gokil! Sekarang kamu udah ngerti cara bikin kode \"milih jalan\" kayak di game RPG \ud83c\udfae Kalau siap, kita bisa lanjut ke topik yang lebih dalam seperti fungsi callback, async/await, atau mulai ngulik ke DOM dan event listener. Let's go! \ud83d\ude80</p>"},{"location":"dasar/18-DOM-APIs/","title":"DOM APIs","text":"<p>Oke, bro! Kita udah masuk ke dunia nyata JavaScript, tempat di mana kode kamu mulai interaktif dan ngomong langsung sama browser: DOM API \u2013 alias jurus ninja buat ngubah isi halaman secara dinamis \ud83d\ude0e\ud83d\udd25</p> <p>Berikut isi lengkap file: <code>D:\\dokumentasi\\javascript\\belajar-javascript-pemula\\docs\\dasar\\18-DOM-APIs.md</code></p> <pre><code># \ud83c\udf10 DOM API (Document Object Model)\n\n&gt; \"DOM itu kayak jembatan antara JavaScript dan dunia nyata (halaman web). Tanpa DOM, JavaScript cuma ngomong sendiri.\"\n\n---\n\n## \ud83c\udfaf Tujuan Pembelajaran\n\nSetelah belajar ini, kamu akan:\n- Tahu apa itu DOM\n- Bisa ambil elemen HTML lewat JavaScript\n- Bisa manipulasi teks, atribut, dan style elemen\n- Bisa bikin interaksi user (event)\n\n---\n\n## \ud83e\uddf1 Apa Itu DOM?\n\nDOM (Document Object Model) adalah representasi struktur dokumen HTML dalam bentuk objek.  \nSetiap tag HTML jadi **node** yang bisa diakses dan dimodifikasi lewat JavaScript.\n\n---\n\n## \ud83d\udd0d Mengakses Elemen HTML\n\n```html\n&lt;p id=\"pesan\"&gt;Halo Dunia!&lt;/p&gt;\n</code></pre> <pre><code>const el = document.getElementById(\"pesan\");\nconsole.log(el.textContent); // \"Halo Dunia!\"\n</code></pre> <p>Metode lainnya:</p> Metode Keterangan <code>getElementById()</code> Berdasarkan id <code>getElementsByClassName()</code> Berdasarkan class (HTMLCollection) <code>getElementsByTagName()</code> Berdasarkan tag <code>querySelector()</code> Selector tunggal (CSS style) <code>querySelectorAll()</code> Semua yang cocok selector (NodeList)"},{"location":"dasar/18-DOM-APIs/#mengubah-konten","title":"\u270f\ufe0f Mengubah Konten","text":"<pre><code>el.textContent = \"Hai dari JavaScript!\";\nel.innerHTML = \"&lt;strong&gt;Bold&lt;/strong&gt;\";\n</code></pre>"},{"location":"dasar/18-DOM-APIs/#mengubah-style","title":"\ud83c\udfa8 Mengubah Style","text":"<pre><code>el.style.color = \"red\";\nel.style.fontSize = \"20px\";\n</code></pre>"},{"location":"dasar/18-DOM-APIs/#mengubah-atribut","title":"\ud83e\uddea Mengubah Atribut","text":"<pre><code>&lt;img id=\"gambar\" src=\"awal.jpg\" /&gt;\n</code></pre> <pre><code>const img = document.getElementById(\"gambar\");\nimg.setAttribute(\"src\", \"baru.jpg\");\nimg.getAttribute(\"src\"); // \"baru.jpg\"\n</code></pre>"},{"location":"dasar/18-DOM-APIs/#menambah-menghapus-elemen","title":"\u2795 Menambah &amp; Menghapus Elemen","text":"<pre><code>const container = document.getElementById(\"kontainer\");\n\nlet p = document.createElement(\"p\");\np.textContent = \"Paragraf baru\";\n\ncontainer.appendChild(p);\n</code></pre> <p>Untuk hapus:</p> <pre><code>container.removeChild(p);\n</code></pre>"},{"location":"dasar/18-DOM-APIs/#event-listener","title":"\ud83d\udd01 Event Listener","text":"<pre><code>&lt;button id=\"klik\"&gt;Klik Aku&lt;/button&gt;\n</code></pre> <pre><code>document.getElementById(\"klik\").addEventListener(\"click\", function() {\n  alert(\"Tombol diklik!\");\n});\n</code></pre>"},{"location":"dasar/18-DOM-APIs/#contoh-real","title":"\ud83d\udd25 Contoh Real","text":"<pre><code>&lt;input id=\"nama\" placeholder=\"Masukkan nama\" /&gt;\n&lt;button id=\"halo\"&gt;Say Hello&lt;/button&gt;\n&lt;p id=\"output\"&gt;&lt;/p&gt;\n</code></pre> <pre><code>document.getElementById(\"halo\").addEventListener(\"click\", function() {\n  let nama = document.getElementById(\"nama\").value;\n  document.getElementById(\"output\").textContent = `Halo, ${nama}!`;\n});\n</code></pre>"},{"location":"dasar/18-DOM-APIs/#quiz-mini","title":"\ud83e\udde0 Quiz Mini","text":"<p>Pertanyaan: Gimana cara ganti warna teks elemen dengan ID <code>judul</code> jadi biru?</p> <p>Jawaban:</p> <pre><code>document.getElementById(\"judul\").style.color = \"blue\";\n</code></pre>"},{"location":"dasar/18-DOM-APIs/#tantangan-coding","title":"\ud83d\udcaa Tantangan Coding","text":"<ol> <li>Buat tombol yang saat diklik, menambahkan elemen <code>&lt;li&gt;</code> ke dalam <code>&lt;ul&gt;</code>.</li> <li>Buat input dan tombol untuk mengganti gambar <code>&lt;img&gt;</code> berdasarkan URL yang dimasukkan user.</li> <li>Tampilkan jumlah huruf yang diketik user secara realtime saat isi input berubah (<code>input</code> event).</li> </ol>"},{"location":"dasar/18-DOM-APIs/#tips-dom-ninja","title":"\ud83d\ude80 Tips DOM Ninja","text":"<ul> <li>Gunakan <code>querySelector()</code> untuk fleksibilitas selector seperti CSS.</li> <li>Event listener bisa dipisah ke function sendiri untuk rapiin kode.</li> <li>DOM hanya bekerja setelah seluruh elemen halaman dimuat!</li> </ul>"},{"location":"dasar/18-DOM-APIs/#kembali-ke-daftar-materi","title":"\ud83d\udd01 Kembali ke Daftar Materi","text":"<p>```</p> <p>Sekarang JavaScript kamu udah bisa hidup di browser, bro! Next bisa lanjut ke topik event bubbling, form validation, atau mulai masuk ke DOM traversal dan manipulasi kelas! Kalo udah panas, tinggal gas ke project mini biar makin skill up \ud83d\udcaa\ud83d\udd25</p>"},{"location":"dasar/19-Strict-Mode/","title":"19 Strict Mode","text":"<p>Siap, bro! Kali ini kita bahas topik yang keliatannya kalem tapi diam-diam penting banget buat ngehindarin bug: Strict Mode \u2014 kayak \"mode serius\" di JavaScript. Tanpa basa-basi, dia galak tapi bikin kode kita lebih aman dan rapi \ud83d\ude24\ud83d\udc6e\u200d\u2642\ufe0f</p> <p>Berikut isi lengkap untuk file: <code>D:\\dokumentasi\\javascript\\belajar-javascript-pemula\\docs\\dasar\\19-Strict-Mode.md</code></p> <pre><code># \ud83d\udd12 Strict Mode di JavaScript\n\n&gt; \"Strict mode itu kayak pelatih yang galak, tapi bikin kamu nggak jadi programmer barbar.\"\n\n---\n\n## \ud83c\udfaf Tujuan Pembelajaran\n\nSetelah mempelajari ini, kamu akan:\n- Tahu apa itu `strict mode`\n- Mengaktifkan strict mode\n- Paham kenapa strict mode penting untuk mencegah bug dan kesalahan\n\n---\n\n## \u2753 Apa Itu Strict Mode?\n\n`Strict mode` adalah fitur di JavaScript yang:\n- Membuat aturan jadi lebih ketat\n- Mencegah kesalahan umum yang sulit dideteksi\n- Mempercepat performa JavaScript di beberapa engine\n\nAktifkan dengan:\n\n```javascript\n\"use strict\";\n</code></pre> <p>Letakkan di atas file atau fungsi:</p> <pre><code>\"use strict\";\n\nlet angka = 10;\n</code></pre>"},{"location":"dasar/19-Strict-Mode/#contoh-kesalahan-yang-dicegah","title":"\ud83d\udcdb Contoh Kesalahan yang Dicegah","text":""},{"location":"dasar/19-Strict-Mode/#1-variabel-tanpa-deklarasi","title":"1. Variabel Tanpa Deklarasi","text":"<p>Tanpa strict:</p> <pre><code>nama = \"Marno\";\nconsole.log(nama); // Masih jalan, tapi ini sebenarnya bug!\n</code></pre> <p>Dengan strict:</p> <pre><code>\"use strict\";\nnama = \"Marno\"; // \u274c Error: nama is not defined\n</code></pre>"},{"location":"dasar/19-Strict-Mode/#2-duplikat-parameter","title":"2. Duplikat Parameter","text":"<pre><code>\"use strict\";\nfunction contoh(a, a) {\n  return a + a;\n}\n// \u274c Error: Duplicate parameter name not allowed\n</code></pre>"},{"location":"dasar/19-Strict-Mode/#3-akses-ke-properti-yang-dilindungi","title":"3. Akses ke Properti yang Dilindungi","text":"<pre><code>\"use strict\";\ndelete Object.prototype; // \u274c Tidak diizinkan\n</code></pre>"},{"location":"dasar/19-Strict-Mode/#kenapa-harus-pakai","title":"\ud83e\udde0 Kenapa Harus Pakai?","text":"<ul> <li>Bikin kode lebih aman</li> <li>Mencegah typo dan kesalahan fatal</li> <li>Kompatibel dengan JavaScript modern</li> <li>Direkomendasikan di semua file JavaScript</li> </ul>"},{"location":"dasar/19-Strict-Mode/#catatan","title":"\u26a0\ufe0f Catatan","text":"<ul> <li>Pastikan kamu memang butuh strict mode (kalau belajar, YES)</li> <li>Bisa juga pakai strict mode hanya di fungsi tertentu:</li> </ul> <pre><code>function jalanSerius() {\n  \"use strict\";\n  // kode aman &amp; ketat\n}\n</code></pre>"},{"location":"dasar/19-Strict-Mode/#mini-quiz","title":"\ud83e\uddea Mini Quiz","text":"<p>Apa output dari kode ini?</p> <pre><code>\"use strict\";\nx = 100;\nconsole.log(x);\n</code></pre> <p>Jawaban: \u274c Error: <code>x</code> is not defined \u2014 harus dideklarasikan dulu!</p>"},{"location":"dasar/19-Strict-Mode/#tantangan-coding","title":"\ud83d\udcaa Tantangan Coding","text":"<ol> <li>Buat kode tanpa strict mode, lalu coba tambahkan <code>use strict</code> dan perbaiki error yang muncul.</li> <li>Coba buat fungsi dengan parameter yang sama (<code>function tes(a, a)</code>) dan lihat perbedaan dengan dan tanpa strict mode.</li> <li>Cari tahu apakah strict mode aktif di file eksternal atau inline script di HTML.</li> </ol>"},{"location":"dasar/19-Strict-Mode/#tips-ninja","title":"\ud83d\ude80 Tips Ninja","text":"<ul> <li>Selalu pakai <code>\"use strict\"</code> di awal file JS kamu</li> <li>Ini bikin kamu kebal terhadap banyak \"jebakan Batman\" di JavaScript</li> <li>Lebih gampang untuk debugging dan kerja tim</li> </ul>"},{"location":"dasar/19-Strict-Mode/#kembali-ke-daftar-materi","title":"\ud83d\udd01 Kembali ke Daftar Materi","text":"<p>```</p> <p>Udah siap jadi programmer disiplin? \ud83d\ude0e Dengan <code>strict mode</code>, JavaScript lo makin rapih, bug makin minim, dan mental kode makin kuat! Next kita bisa lanjut bahas ES6 modules, error handling, atau debugging 101. Gas terus, bro! \ud83c\udfc1\ud83d\udd25</p>"},{"location":"dasar/20-Using-keyword/","title":"Using Keyword","text":"<p>Yess, kali ini kita bakal ngulik tentang keyword di JavaScript yang sering banget dipake, yaitu: <code>this</code>, <code>new</code>, <code>super</code>, <code>class</code>, dan lainnya \u2014 benda-benda penting yang bikin kode kamu lebih powerful \ud83d\udd11\ud83d\ude80</p> <p>Berikut isi lengkap file: <code>D:\\dokumentasi\\javascript\\belajar-javascript-pemula\\docs\\dasar\\20-Using-keyword.md</code></p> <pre><code># \ud83d\udd11 Menggunakan Keyword di JavaScript\n\n&gt; \"Keyword di JavaScript tuh bukan cuma kata-kata kunci, tapi kayak senjata rahasia yang punya kekuatan besar buat program kamu!\"\n\n---\n\n## \ud83c\udfaf Tujuan Pembelajaran\n\nSetelah mempelajari ini, kamu akan:\n- Mengerti cara kerja keyword penting di JavaScript\n- Bisa menggunakan keyword seperti `this`, `new`, `super`, dan lainnya dalam konteks yang tepat\n\n---\n\n## \ud83e\uddf1 1. `this` Keyword\n\n`this` adalah referensi ke objek yang sedang berinteraksi dengan fungsi. Tapi, konteksnya bisa beda-beda, tergantung di mana dan bagaimana `this` dipanggil.\n\n### Contoh:\n\n```javascript\nfunction halo() {\n  console.log(this);\n}\n\nlet obj = {\n  nama: \"Marno\",\n  halo: halo\n};\n\nobj.halo();  // `this` mengacu pada objek `obj`\n</code></pre> <p>Kapan <code>this</code> Mengacu ke Apa? - Dalam function biasa, <code>this</code> mengacu ke global object (di browser: <code>window</code>) - Dalam method objek, <code>this</code> mengacu ke objek itu sendiri - Dalam constructor atau class, <code>this</code> mengacu ke instansi objek</p>"},{"location":"dasar/20-Using-keyword/#2-new-keyword","title":"\ud83d\udd27 2. <code>new</code> Keyword","text":"<p>Digunakan untuk membuat object instance baru dari constructor function atau class.</p>"},{"location":"dasar/20-Using-keyword/#contoh","title":"Contoh:","text":"<pre><code>function Orang(nama, umur) {\n  this.nama = nama;\n  this.umur = umur;\n}\n\nlet orang1 = new Orang(\"Marno\", 22);\nconsole.log(orang1.nama);  // \"Marno\"\n</code></pre> <p>Atau dengan class:</p> <pre><code>class Mobil {\n  constructor(merek) {\n    this.merek = merek;\n  }\n}\n\nlet mobil1 = new Mobil(\"Toyota\");\nconsole.log(mobil1.merek);  // \"Toyota\"\n</code></pre>"},{"location":"dasar/20-Using-keyword/#3-super-keyword","title":"\ud83d\ude80 3. <code>super</code> Keyword","text":"<p><code>super</code> digunakan untuk memanggil constructor atau method dari parent class di dalam class child.</p>"},{"location":"dasar/20-Using-keyword/#contoh_1","title":"Contoh:","text":"<pre><code>class Hewan {\n  constructor(nama) {\n    this.nama = nama;\n  }\n\n  suara() {\n    console.log(\"Suara hewan!\");\n  }\n}\n\nclass Anjing extends Hewan {\n  constructor(nama) {\n    super(nama);  // Memanggil constructor parent class\n  }\n\n  suara() {\n    super.suara();  // Memanggil method parent class\n    console.log(\"Guk guk!\");\n  }\n}\n\nlet anjing = new Anjing(\"Buddy\");\nanjing.suara();\n// Output:\n// \"Suara hewan!\"\n// \"Guk guk!\"\n</code></pre>"},{"location":"dasar/20-Using-keyword/#4-class-keyword","title":"\ud83d\udee0\ufe0f 4. <code>class</code> Keyword","text":"<p><code>class</code> adalah cara modern untuk mendefinisikan constructor dan method di JavaScript.</p>"},{"location":"dasar/20-Using-keyword/#contoh_2","title":"Contoh:","text":"<pre><code>class Manusia {\n  constructor(nama, umur) {\n    this.nama = nama;\n    this.umur = umur;\n  }\n\n  kenalan() {\n    console.log(`Halo, nama saya ${this.nama} dan saya berumur ${this.umur} tahun.`);\n  }\n}\n\nlet manusia1 = new Manusia(\"Marno\", 22);\nmanusia1.kenalan();  // \"Halo, nama saya Marno dan saya berumur 22 tahun.\"\n</code></pre>"},{"location":"dasar/20-Using-keyword/#5-let-const-dan-var-keyword","title":"\ud83e\uddf3 5. <code>let</code>, <code>const</code>, dan <code>var</code> Keyword","text":"<ul> <li><code>let</code> dan <code>const</code> lebih disarankan untuk deklarasi variabel karena lebih aman dalam konteks block-scoping.</li> <li><code>var</code> digunakan di JavaScript lama, dan lebih rentan terhadap kesalahan (terutama karena hoisting).</li> </ul> <pre><code>let a = 10;\nconst b = 20;\nvar c = 30;\n\n{\n  let a = 5;  // Scoped hanya dalam blok ini\n  console.log(a);  // 5\n}\nconsole.log(a);  // 10 (a yang luar block)\n\n{\n  var c = 50;  // `var` nggak scoping ke blok, jadi c diubah di luar\n}\nconsole.log(c);  // 50\n</code></pre>"},{"location":"dasar/20-Using-keyword/#6-delete-keyword","title":"\u26a0\ufe0f 6. <code>delete</code> Keyword","text":"<p>Dipakai untuk menghapus properti dari objek.</p>"},{"location":"dasar/20-Using-keyword/#contoh_3","title":"Contoh:","text":"<pre><code>let orang = {\n  nama: \"Marno\",\n  umur: 22\n};\n\ndelete orang.umur;  // Menghapus properti umur\nconsole.log(orang);  // { nama: \"Marno\" }\n</code></pre>"},{"location":"dasar/20-Using-keyword/#tips-penting","title":"\ud83e\udde0 Tips Penting","text":"<ul> <li>Gunakan <code>this</code> dengan hati-hati, terutama di function yang tidak berhubungan dengan objek (misalnya dalam event handler).</li> <li>Selalu pakai <code>new</code> saat membuat instance dari class atau constructor.</li> <li><code>super</code> sangat berguna saat bekerja dengan inheritance, jadi manfaatkan kalau kamu bikin class turunan.</li> <li>Hindari <code>var</code>, lebih baik pakai <code>let</code> atau <code>const</code> untuk scoping yang lebih jelas.</li> </ul>"},{"location":"dasar/20-Using-keyword/#tantangan-coding","title":"\ud83d\udcaa Tantangan Coding","text":"<ol> <li>Buat class <code>Sepeda</code> yang memiliki properti <code>merek</code> dan method <code>berjalan()</code>.    Kemudian buat class turunan <code>SepedaGunung</code> yang memanggil method <code>berjalan()</code> dari class parent dan menambah fitur <code>rem()</code>.</li> <li>Buat program yang menggunakan <code>this</code> untuk menghitung jumlah total nilai dalam objek <code>siswa</code>.</li> </ol>"},{"location":"dasar/20-Using-keyword/#kembali-ke-daftar-materi","title":"\ud83d\udd01 Kembali ke Daftar Materi","text":"<p>```</p> <p>Itulah pembahasan mengenai keyword yang sering dipake di JavaScript! Kalo udah ngerti ini, lo siap buat ngoding dengan konsep yang lebih kuat dan fleksibel. Mau lanjut ke modul ES6, async/await, atau eksplorasi JavaScript design patterns? Lanjut terus aja, bro! \ud83d\ude80</p>"},{"location":"dasar/21-Asynchronous-Javascript/","title":"Asynchronous","text":"<p>Oke, kita siap buat bahas topik yang cukup powerful dan penting di JavaScript: Asynchronous JavaScript \u2014 yaitu bagaimana cara kita menangani proses yang nggak langsung selesai dan membutuhkan waktu, kayak permintaan ke server, pengolahan file, atau event user.</p> <p>Berikut isi lengkap untuk file: <code>D:\\dokumentasi\\javascript\\belajar-javascript-pemula\\docs\\dasar\\21-Asynchronous-Javascript.md</code></p> <pre><code># \u23f3 Asynchronous JavaScript\n\n&gt; \"Asynchronous JavaScript itu kayak ninja di dunia programming: diam-diam menjalankan tugas sambil nunggu proses lain selesai tanpa mengganggu yang lainnya.\"\n\n---\n\n## \ud83c\udfaf Tujuan Pembelajaran\n\nSetelah mempelajari ini, kamu akan:\n- Paham apa itu **Asynchronous JavaScript** dan kenapa penting\n- Bisa menggunakan **callbacks**, **Promises**, dan **async/await** dalam kode JavaScript kamu\n- Mengetahui cara menangani operasi yang memerlukan waktu, seperti API request atau pengolahan data besar\n\n---\n\n## \ud83d\udeb6\u200d\u2642\ufe0f Apa Itu Asynchronous JavaScript?\n\nAsynchronous JavaScript memungkinkan kita untuk melakukan beberapa tugas sekaligus tanpa harus menunggu satu tugas selesai dulu. Dalam operasi **synchronous**, semua tugas dijalankan berurutan, artinya kode berikutnya baru dieksekusi setelah tugas pertama selesai. Sebaliknya, **asynchronous** membebaskan proses untuk berjalan sembari menunggu tugas lainnya selesai.\n\n### Contoh:\n\nMisalnya, kamu sedang memesan pizza. Di dunia synchronous, kamu akan menunggu pizza datang dulu, baru bisa makan. Di asynchronous, kamu bisa mulai makan sebelum pizza datang, dan begitu pizza datang, kamu langsung lanjutkan makan pizza!\n\n---\n\n## \ud83d\udcdd 1. Callbacks\n\nCallback adalah fungsi yang dijalankan setelah tugas lain selesai. Pada JavaScript, kita sering menggunakan callback untuk menangani operasi asynchronous.\n\n### Contoh:\n\n```javascript\nconsole.log(\"Mulai\");\n\nsetTimeout(function() {\n  console.log(\"Tugas selesai setelah 2 detik!\");\n}, 2000);\n\nconsole.log(\"Selesai\");\n</code></pre> <p>Output:</p> <pre><code>Mulai\nSelesai\nTugas selesai setelah 2 detik!\n</code></pre> <p>Catatan: <code>setTimeout</code> adalah fungsi asynchronous, jadi setelah memanggilnya, eksekusi kode terus berlanjut dan baru kembali ke callback setelah waktu yang ditentukan.</p>"},{"location":"dasar/21-Asynchronous-Javascript/#2-promises","title":"\ud83d\udce6 2. Promises","text":"<p>Promises adalah cara yang lebih modern dan terstruktur untuk menangani asynchronous code, menggantikan callback. Promise bisa dalam 3 status: - Pending: Ketika operasi belum selesai - Resolved: Ketika operasi berhasil - Rejected: Ketika operasi gagal</p>"},{"location":"dasar/21-Asynchronous-Javascript/#contoh","title":"Contoh:","text":"<pre><code>let janji = new Promise(function(resolve, reject) {\n  let sukses = true; // ubah jadi false untuk melihat hasil reject\n\n  if (sukses) {\n    resolve(\"Operasi berhasil!\");\n  } else {\n    reject(\"Terjadi kesalahan.\");\n  }\n});\n\njanji.then(function(result) {\n  console.log(result);  // \"Operasi berhasil!\"\n}).catch(function(error) {\n  console.log(error);  // \"Terjadi kesalahan.\"\n});\n</code></pre>"},{"location":"dasar/21-Asynchronous-Javascript/#3-asyncawait","title":"\u26a1 3. Async/Await","text":"<p><code>async/await</code> adalah sintaks baru yang lebih mudah dipahami untuk menangani operasi asynchronous. <code>async</code> digunakan untuk mendeklarasikan fungsi asynchronous, dan <code>await</code> digunakan untuk menunggu hasil dari Promise.</p>"},{"location":"dasar/21-Asynchronous-Javascript/#contoh_1","title":"Contoh:","text":"<pre><code>async function ambilData() {\n  let response = await fetch('https://jsonplaceholder.typicode.com/posts');\n  let data = await response.json();\n  console.log(data);\n}\n\nambilData();\n</code></pre> <p>Dengan <code>async/await</code>, kode menjadi lebih seperti kode synchronous, tetapi tetap bersifat asynchronous.</p>"},{"location":"dasar/21-Asynchronous-Javascript/#4-error-handling-dalam-asynchronous-javascript","title":"\ud83d\udee0\ufe0f 4. Error Handling dalam Asynchronous JavaScript","text":"<p>Menangani error dalam kode asynchronous itu penting banget. Kalau pakai callback, error biasanya dikelola dengan parameter kedua dalam callback. Untuk Promise, kita bisa pakai <code>.catch()</code>, dan dengan <code>async/await</code>, kita bisa gunakan <code>try/catch</code>.</p>"},{"location":"dasar/21-Asynchronous-Javascript/#contoh-callback-error","title":"Contoh Callback Error:","text":"<pre><code>function ambilData(callback) {\n  let error = false;  // coba ganti ke true untuk lihat error handling\n\n  if (error) {\n    callback(\"Terjadi kesalahan!\", null);\n  } else {\n    callback(null, \"Data berhasil diambil\");\n  }\n}\n\nambilData(function(err, data) {\n  if (err) {\n    console.log(err);  // \"Terjadi kesalahan!\"\n  } else {\n    console.log(data);  // \"Data berhasil diambil\"\n  }\n});\n</code></pre>"},{"location":"dasar/21-Asynchronous-Javascript/#contoh-promise-error","title":"Contoh Promise Error:","text":"<pre><code>let janji = new Promise(function(resolve, reject) {\n  let error = false;  // coba ganti ke true untuk lihat error handling\n\n  if (error) {\n    reject(\"Terjadi kesalahan\");\n  } else {\n    resolve(\"Data berhasil diambil\");\n  }\n});\n\njanji.then(function(result) {\n  console.log(result);  // \"Data berhasil diambil\"\n}).catch(function(error) {\n  console.log(error);  // \"Terjadi kesalahan\"\n});\n</code></pre>"},{"location":"dasar/21-Asynchronous-Javascript/#contoh-asyncawait-error","title":"Contoh Async/Await Error:","text":"<pre><code>async function ambilData() {\n  try {\n    let response = await fetch('https://jsonplaceholder.typicode.com/posts');\n    let data = await response.json();\n    console.log(data);\n  } catch (error) {\n    console.log(\"Terjadi kesalahan:\", error);\n  }\n}\n\nambilData();\n</code></pre>"},{"location":"dasar/21-Asynchronous-Javascript/#tips","title":"\ud83d\udca1 Tips","text":"<ul> <li>Gunakan <code>async/await</code> jika memungkinkan: Kode menjadi lebih mudah dibaca dan dikelola.</li> <li>Hati-hati dengan callback hell: Jika terlalu banyak callback bertingkat, pertimbangkan untuk menggunakan Promise atau async/await.</li> <li>Error handling itu penting: Jangan lupa untuk menangani error di setiap langkah asynchronous untuk mencegah aplikasi crash.</li> </ul>"},{"location":"dasar/21-Asynchronous-Javascript/#tantangan-coding","title":"\ud83d\udcaa Tantangan Coding","text":"<ol> <li>Buat aplikasi yang mengambil data dari API dan menampilkan hasilnya setelah 2 detik menggunakan <code>setTimeout</code> dan callback.</li> <li>Gunakan <code>fetch</code> API untuk mengambil data dari API JSONPlaceholder dan tampilkan data dalam bentuk list menggunakan <code>async/await</code>.</li> <li>Coba buat error handling yang lebih canggih: tangani kesalahan baik dalam callback, Promise, dan async/await dengan <code>try/catch</code>.</li> </ol>"},{"location":"dasar/21-Asynchronous-Javascript/#kembali-ke-daftar-materi","title":"\ud83d\udd01 Kembali ke Daftar Materi","text":"<p>```</p> <p>Sekarang, lo udah paham cara kerja asynchronous JavaScript yang keren ini. Dengan <code>callbacks</code>, Promises, dan async/await, lo bisa menghandle proses-proses berat tanpa ngacauin alur eksekusi program lo! Mau lanjut ke topik Event Loop atau Web APIs? Kita gas terus aja! \ud83d\udcaa\ud83d\ude80</p>"},{"location":"dasar/22-Modules-in-Javascript/","title":"22 Modules in Javascript","text":"<p>Berikut isi lengkap untuk file: <code>D:\\dokumentasi\\javascript\\belajar-javascript-pemula\\docs\\dasar\\22-Modules-in-Javascript.md</code></p> <pre><code># \ud83d\udce6 Modules in JavaScript\n\n&gt; \"Modules di JavaScript itu kayak lemari di rumah lo. Semua barang dikelompokkan dan disimpan rapi, jadi lo bisa ambil dengan mudah dan terorganisir.\"\n\n---\n\n## \ud83c\udfaf Tujuan Pembelajaran\n\nSetelah mempelajari ini, kamu akan:\n- Mengerti apa itu **modules** dalam JavaScript\n- Bisa memisahkan kode menjadi beberapa file menggunakan **export** dan **import**\n- Mengetahui perbedaan antara **CommonJS** dan **ES6 Modules**\n\n---\n\n## \ud83e\udde9 Apa Itu Modules?\n\nModules di JavaScript adalah cara untuk membagi kode kamu ke dalam file yang lebih kecil dan terpisah. Ini membantu dalam mengorganisir kode agar lebih rapi dan memudahkan pengelolaan proyek besar.\n\n### Kenapa Modules Penting?\n- Membantu dalam **scoping**, sehingga variabel dan fungsi tidak berserakan ke seluruh proyek.\n- Memudahkan dalam **reuse code** antara berbagai bagian aplikasi.\n- Meningkatkan **maintainability**, karena setiap modul hanya menangani satu tugas tertentu.\n\n---\n\n## \ud83d\udee0\ufe0f 1. **Exporting** dan **Importing**\n\nDi JavaScript, kamu bisa menggunakan dua cara untuk **export** dan **import** modul:  \n- **Named Exports**\n- **Default Export**\n\n### \ud83d\udce4 Named Exports\n\nMenggunakan `export` untuk mengekspor beberapa variabel atau fungsi dari modul.\n\n#### Contoh:\n\n**math.js** (file module)\n```javascript\nexport const add = (a, b) =&gt; a + b;\nexport const subtract = (a, b) =&gt; a - b;\n</code></pre> <p>main.js (file utama)</p> <pre><code>import { add, subtract } from './math.js';\n\nconsole.log(add(2, 3));        // 5\nconsole.log(subtract(5, 3));   // 2\n</code></pre>"},{"location":"dasar/22-Modules-in-Javascript/#default-export","title":"\ud83d\udce4 Default Export","text":"<p>Menggunakan <code>export default</code> untuk mengekspor satu nilai atau objek sebagai default.</p>"},{"location":"dasar/22-Modules-in-Javascript/#contoh","title":"Contoh:","text":"<p>calculator.js (file module)</p> <pre><code>export default function multiply(a, b) {\n  return a * b;\n}\n</code></pre> <p>main.js (file utama)</p> <pre><code>import multiply from './calculator.js';\n\nconsole.log(multiply(2, 3));   // 6\n</code></pre>"},{"location":"dasar/22-Modules-in-Javascript/#2-menggunakan-modules-di-browser","title":"\ud83c\udf0d 2. Menggunakan Modules di Browser","text":"<p>Untuk menggunakan modules di browser, kamu perlu menambahkan atribut <code>type=\"module\"</code> di tag <code>&lt;script&gt;</code>.</p>"},{"location":"dasar/22-Modules-in-Javascript/#contoh_1","title":"Contoh:","text":"<p>index.html</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"UTF-8\"&gt;\n  &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n  &lt;title&gt;Modular JavaScript&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;script type=\"module\"&gt;\n    import { add } from './math.js';\n    console.log(add(2, 3));  // 5\n  &lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>math.js</p> <pre><code>export const add = (a, b) =&gt; a + b;\n</code></pre> <p>Catatan: Pada penggunaan modules di browser, file JavaScript harus diakses melalui server (local server atau web server), dan bukan file system langsung (file:///).</p>"},{"location":"dasar/22-Modules-in-Javascript/#3-commonjs-vs-es6-modules","title":"\ud83d\udd27 3. CommonJS vs ES6 Modules","text":"<p>JavaScript memiliki dua sistem modul yang populer: - CommonJS: Digunakan di Node.js dan mengekspor menggunakan <code>module.exports</code> dan <code>require()</code>. - ES6 Modules: Merupakan standar modul di JavaScript modern yang menggunakan <code>export</code> dan <code>import</code>.</p>"},{"location":"dasar/22-Modules-in-Javascript/#contoh-commonjs","title":"Contoh CommonJS:","text":"<p>math.js</p> <pre><code>module.exports = {\n  add: (a, b) =&gt; a + b,\n  subtract: (a, b) =&gt; a - b\n};\n</code></pre> <p>main.js</p> <pre><code>const math = require('./math.js');\nconsole.log(math.add(2, 3));  // 5\nconsole.log(math.subtract(5, 3)); // 2\n</code></pre>"},{"location":"dasar/22-Modules-in-Javascript/#kapan-menggunakan-mana","title":"Kapan Menggunakan Mana?","text":"<ul> <li>CommonJS digunakan di server-side JavaScript (Node.js).</li> <li>ES6 Modules digunakan di browser dan proyek JavaScript modern yang menggunakan bundler seperti Webpack atau Rollup.</li> </ul>"},{"location":"dasar/22-Modules-in-Javascript/#4-dynamic-import","title":"\u26a1 4. Dynamic Import","text":"<p>ES6 Modules memungkinkan kita untuk mengimpor modul secara dinamis, yang bisa membantu mengoptimalkan performa dengan hanya memuat modul ketika dibutuhkan.</p>"},{"location":"dasar/22-Modules-in-Javascript/#contoh_2","title":"Contoh:","text":"<pre><code>if (someCondition) {\n  import('./math.js')\n    .then((math) =&gt; {\n      console.log(math.add(2, 3));\n    })\n    .catch((error) =&gt; {\n      console.error('Error loading module:', error);\n    });\n}\n</code></pre> <p>Dengan dynamic import, modul hanya akan dimuat saat dibutuhkan, meningkatkan efisiensi aplikasi.</p>"},{"location":"dasar/22-Modules-in-Javascript/#tips","title":"\ud83d\udca1 Tips","text":"<ul> <li>Gunakan default export ketika modul hanya memiliki satu ekspor utama, seperti fungsi atau kelas.</li> <li>Gunakan named exports untuk mengekspor beberapa variabel atau fungsi dari modul.</li> <li>Manfaatkan dynamic imports untuk hanya memuat modul saat dibutuhkan, misalnya untuk modul yang jarang digunakan atau berbasis fitur.</li> <li>Di proyek Node.js, lebih sering menggunakan CommonJS, sementara di proyek frontend modern, gunakan ES6 Modules.</li> </ul>"},{"location":"dasar/22-Modules-in-Javascript/#tantangan-coding","title":"\ud83d\udcaa Tantangan Coding","text":"<ol> <li>Buat dua modul: satu untuk fungsi matematika (<code>add</code>, <code>subtract</code>, <code>multiply</code>, dll.) dan satu untuk mengelola data pengguna (misalnya, <code>createUser</code>, <code>getUser</code>). Ekspor dan impor fungsi-fungsi tersebut di file utama.</li> <li>Implementasikan dynamic import untuk memuat modul tertentu hanya ketika suatu event terjadi (misalnya, klik tombol).</li> <li>Pisahkan kode proyek yang lebih besar menjadi beberapa modul menggunakan ES6 Modules.</li> </ol>"},{"location":"dasar/22-Modules-in-Javascript/#kembali-ke-daftar-materi","title":"\ud83d\udd01 Kembali ke Daftar Materi","text":"<p>```</p> <p>Sekarang kamu sudah paham betul soal modules di JavaScript! Dengan memanfaatkan export dan import, kamu bisa membagi aplikasi JavaScript menjadi bagian-bagian kecil yang rapi dan mudah dikelola. Lanjut terus, dan kita bisa bahas lebih lanjut tentang bundling tools atau JavaScript libraries lainnya! \ud83d\ude80</p>"},{"location":"dasar/23-Iterators-and-generators/","title":"23 Iterators and generators","text":"<p>Berikut isi lengkap untuk file: <code>D:\\dokumentasi\\javascript\\belajar-javascript-pemula\\docs\\dasar\\23-Iterators-and-generators.md</code></p> <pre><code># \ud83d\udd04 Iterators and Generators in JavaScript\n\n&gt; \"Iterators dan Generators adalah alat untuk mengontrol bagaimana kita mengakses elemen dalam sebuah koleksi secara lebih fleksibel dan efisien.\"\n\n---\n\n## \ud83c\udfaf Tujuan Pembelajaran\n\nSetelah mempelajari ini, kamu akan:\n- Memahami apa itu **iterators** dan **generators** di JavaScript\n- Bisa membuat koleksi data yang bisa diiterasi menggunakan **iterator**\n- Bisa membuat **generators** untuk menghasilkan data secara bertahap tanpa memuat semuanya sekaligus\n\n---\n\n## \ud83e\udde9 Apa Itu Iterators?\n\n**Iterator** adalah objek yang memungkinkan kita untuk mengakses elemen-elemen dari koleksi (seperti array atau objek) satu per satu tanpa mengakses koleksi tersebut secara langsung. Iterator menggunakan dua metode utama:  \n- **`next()`**: Mengambil elemen berikutnya dalam koleksi.\n- **`done`**: Menandakan apakah koleksi sudah habis atau belum.\n\nIterator biasanya digunakan dengan objek seperti array, string, atau map yang dapat diiterasi.\n\n### Contoh:\n\n```javascript\nconst numbers = [1, 2, 3];\nconst iterator = numbers[Symbol.iterator](); // Mendapatkan iterator untuk array\n\nconsole.log(iterator.next()); // { value: 1, done: false }\nconsole.log(iterator.next()); // { value: 2, done: false }\nconsole.log(iterator.next()); // { value: 3, done: false }\nconsole.log(iterator.next()); // { value: undefined, done: true }\n</code></pre> <p>Catatan: Pada contoh di atas, kita menggunakan <code>Symbol.iterator</code> untuk mendapatkan iterator untuk array. Setiap panggilan ke <code>next()</code> akan memberikan objek dengan dua properti: - value: Nilai elemen berikutnya. - done: Boolean yang menandakan apakah kita sudah selesai mengiterasi semua elemen.</p>"},{"location":"dasar/23-Iterators-and-generators/#1-custom-iterator","title":"\ud83d\udee0\ufe0f 1. Custom Iterator","text":"<p>Kamu bisa membuat iterator sendiri untuk objek atau struktur data kustom dengan mendefinisikan fungsi <code>next()</code> dan menggunakan <code>Symbol.iterator</code>.</p>"},{"location":"dasar/23-Iterators-and-generators/#contoh","title":"Contoh:","text":"<pre><code>const myCollection = {\n  items: ['apple', 'banana', 'cherry'],\n  [Symbol.iterator]: function() {\n    let index = 0;\n    let items = this.items;\n\n    return {\n      next: function() {\n        if (index &lt; items.length) {\n          return { value: items[index++], done: false };\n        } else {\n          return { value: undefined, done: true };\n        }\n      }\n    };\n  }\n};\n\nconst iterator = myCollection[Symbol.iterator]();\nconsole.log(iterator.next()); // { value: 'apple', done: false }\nconsole.log(iterator.next()); // { value: 'banana', done: false }\nconsole.log(iterator.next()); // { value: 'cherry', done: false }\nconsole.log(iterator.next()); // { value: undefined, done: true }\n</code></pre>"},{"location":"dasar/23-Iterators-and-generators/#apa-itu-generators","title":"\ud83d\udd04 Apa Itu Generators?","text":"<p>Generators adalah fungsi khusus yang memungkinkan kita untuk menunda eksekusi fungsi dan melanjutkannya di lain waktu menggunakan keyword <code>yield</code>. Generator memungkinkan kita untuk menghasilkan nilai satu per satu, yang sangat berguna ketika bekerja dengan data besar atau alur yang harus menghemat memori.</p> <p>Generator dapat diidentifikasi dengan menggunakan <code>function*</code> (perhatikan tanda bintang setelah kata kunci <code>function</code>).</p>"},{"location":"dasar/23-Iterators-and-generators/#contoh-generator","title":"Contoh Generator:","text":"<pre><code>function* generateNumbers() {\n  yield 1;\n  yield 2;\n  yield 3;\n}\n\nconst generator = generateNumbers();\nconsole.log(generator.next()); // { value: 1, done: false }\nconsole.log(generator.next()); // { value: 2, done: false }\nconsole.log(generator.next()); // { value: 3, done: false }\nconsole.log(generator.next()); // { value: undefined, done: true }\n</code></pre> <p>Di sini, setiap kali <code>next()</code> dipanggil, eksekusi fungsi generator dihentikan pada pernyataan <code>yield</code> dan akan dilanjutkan dari titik tersebut saat <code>next()</code> dipanggil lagi.</p>"},{"location":"dasar/23-Iterators-and-generators/#2-generator-dengan-parameter","title":"\ud83d\udcdd 2. Generator dengan Parameter","text":"<p>Kamu juga bisa memberikan nilai ke generator dengan menggunakan parameter <code>yield</code> dan mengembalikan nilai ke generator dengan <code>next()</code>.</p>"},{"location":"dasar/23-Iterators-and-generators/#contoh_1","title":"Contoh:","text":"<pre><code>function* generatorWithParams() {\n  let result = yield 'Masukkan angka:';\n  console.log(`Angka yang dimasukkan: ${result}`);\n  yield 'Selesai!';\n}\n\nconst gen = generatorWithParams();\nconsole.log(gen.next().value); // 'Masukkan angka:'\nconsole.log(gen.next(5).value); // 'Selesai!'\n</code></pre> <p>Catatan: Ketika kita memanggil <code>gen.next(5)</code>, angka 5 dikirimkan ke dalam generator dan diproses pada bagian <code>yield</code>.</p>"},{"location":"dasar/23-Iterators-and-generators/#3-menggunakan-generator-untuk-asynchronous-programming","title":"\ud83d\udd04 3. Menggunakan Generator untuk Asynchronous Programming","text":"<p>Generator juga sangat berguna untuk mengelola proses asynchronous dengan cara yang lebih sederhana, sebelum adanya <code>async/await</code>.</p>"},{"location":"dasar/23-Iterators-and-generators/#contoh_2","title":"Contoh:","text":"<pre><code>function* fetchData() {\n  const data = yield fetch('https://jsonplaceholder.typicode.com/posts');\n  const posts = yield data.json();\n  console.log(posts);\n}\n\nconst gen = fetchData();\nconst dataPromise = gen.next().value;\ndataPromise\n  .then((data) =&gt; gen.next(data))\n  .then((posts) =&gt; gen.next(posts));\n</code></pre> <p>Di sini, kita menggunakan generator untuk menangani proses asynchronous dengan cara yang lebih mirip dengan kode synchronous.</p>"},{"location":"dasar/23-Iterators-and-generators/#4-perbedaan-iterators-dan-generators","title":"\u26a1 4. Perbedaan Iterators dan Generators","text":"<ul> <li>Iterator: Merupakan objek yang memiliki metode <code>next()</code> untuk mengiterasi elemen satu per satu. Biasanya digunakan dalam struktur data seperti array, string, dan set.</li> <li>Generator: Merupakan fungsi khusus yang dapat menghentikan eksekusi dengan <code>yield</code> dan melanjutkannya di kemudian waktu. Generator memudahkan pembuatan koleksi yang besar secara lebih efisien.</li> </ul>"},{"location":"dasar/23-Iterators-and-generators/#tips","title":"\ud83d\udca1 Tips","text":"<ul> <li>Gunakan Iterator jika kamu ingin mengakses elemen-elemen koleksi secara bertahap atau sekuensial.</li> <li>Gunakan Generator ketika kamu ingin menghasilkan data secara bertahap dan mengatur eksekusi fungsi dengan cara yang lebih fleksibel.</li> <li>Generator sangat berguna untuk menangani asynchronous programming, sebelum adanya <code>async/await</code>.</li> </ul>"},{"location":"dasar/23-Iterators-and-generators/#tantangan-coding","title":"\ud83d\udcaa Tantangan Coding","text":"<ol> <li>Buat iterator untuk objek <code>Books</code> yang memiliki beberapa properti dan bisa diiterasi menggunakan <code>next()</code>.</li> <li>Coba buat generator untuk menghasilkan bilangan Fibonacci satu per satu.</li> <li>Implementasikan generator untuk mengambil data secara bertahap menggunakan <code>fetch</code> dan <code>yield</code> untuk menangani data dari API secara lebih efisien.</li> </ol>"},{"location":"dasar/23-Iterators-and-generators/#kembali-ke-daftar-materi","title":"\ud83d\udd01 Kembali ke Daftar Materi","text":"<p>```</p> <p>Dengan topik Iterators dan Generators di JavaScript, kamu bisa menangani koleksi data dan proses yang membutuhkan alur bertahap dengan cara yang lebih efisien. Jangan lupa untuk eksplor lebih lanjut tentang async generators atau streaming data untuk kebutuhan aplikasi yang lebih kompleks! \ud83d\ude80</p>"},{"location":"dasar/24-Classes/","title":"Classes","text":"<p>Berikut isi lengkap untuk file: <code>D:\\dokumentasi\\javascript\\belajar-javascript-pemula\\docs\\dasar\\24-Classes.md</code></p> <pre><code># \ud83c\udff7\ufe0f Classes in JavaScript\n\n&gt; \"Classes di JavaScript adalah cara untuk membuat template objek yang lebih terstruktur, mirip seperti blueprint yang bisa digunakan untuk membuat banyak objek.\"\n\n---\n\n## \ud83c\udfaf Tujuan Pembelajaran\n\nSetelah mempelajari ini, kamu akan:\n- Memahami konsep **classes** di JavaScript\n- Bisa membuat **class** untuk mendefinisikan objek dengan properti dan metode\n- Mengetahui cara kerja **constructor**, **inheritance**, dan **static methods** di dalam class\n\n---\n\n## \ud83e\udde9 Apa Itu Class?\n\n**Class** adalah template atau cetak biru untuk membuat objek. Di dalam class, kamu bisa mendefinisikan **properties** (atribut) dan **methods** (fungsi) yang dimiliki oleh objek yang dibuat dari class tersebut.\n\nDengan menggunakan **class**, kamu bisa membuat banyak objek yang memiliki pola yang sama, tetapi dengan nilai yang berbeda.\n\n### Sintaks Dasar Class\n\n```javascript\nclass ClassName {\n  constructor(param1, param2) {\n    // Properti yang dimiliki oleh setiap objek\n    this.property1 = param1;\n    this.property2 = param2;\n  }\n\n  // Method yang dimiliki oleh setiap objek\n  method1() {\n    console.log('Hello, world!');\n  }\n}\n</code></pre> <ul> <li>constructor: Fungsi khusus yang dijalankan ketika objek dibuat.</li> <li>this: Merujuk pada objek yang sedang dibuat.</li> </ul>"},{"location":"dasar/24-Classes/#1-membuat-dan-menggunakan-class","title":"\ud83d\udee0\ufe0f 1. Membuat dan Menggunakan Class","text":"<p>Untuk membuat objek dari class, kamu cukup menggunakan keyword <code>new</code> diikuti dengan nama class.</p>"},{"location":"dasar/24-Classes/#contoh","title":"Contoh:","text":"<pre><code>class Person {\n  constructor(name, age) {\n    this.name = name;\n    this.age = age;\n  }\n\n  greet() {\n    console.log(`Hello, my name is ${this.name} and I am ${this.age} years old.`);\n  }\n}\n\nconst person1 = new Person('Alice', 25);\nconst person2 = new Person('Bob', 30);\n\nperson1.greet();  // Hello, my name is Alice and I am 25 years old.\nperson2.greet();  // Hello, my name is Bob and I am 30 years old.\n</code></pre> <p>Di sini, kita membuat class Person yang memiliki properti <code>name</code> dan <code>age</code>, serta metode <code>greet()</code> yang mencetak salam.</p>"},{"location":"dasar/24-Classes/#2-inheritance-pewarisan","title":"\ud83d\udd04 2. Inheritance (Pewarisan)","text":"<p>JavaScript juga mendukung inheritance (pewarisan), yang memungkinkan kita untuk membuat class baru berdasarkan class yang sudah ada. Dengan inheritance, class baru bisa mewarisi properti dan metode dari class lama.</p>"},{"location":"dasar/24-Classes/#sintaks-inheritance","title":"Sintaks Inheritance","text":"<pre><code>class SubClass extends SuperClass {\n  constructor() {\n    super(); // Memanggil constructor dari SuperClass\n  }\n}\n</code></pre>"},{"location":"dasar/24-Classes/#contoh_1","title":"Contoh:","text":"<pre><code>class Animal {\n  constructor(name) {\n    this.name = name;\n  }\n\n  speak() {\n    console.log(`${this.name} makes a sound.`);\n  }\n}\n\nclass Dog extends Animal {\n  constructor(name, breed) {\n    super(name);  // Memanggil constructor dari class Animal\n    this.breed = breed;\n  }\n\n  speak() {\n    console.log(`${this.name} barks.`);\n  }\n}\n\nconst dog1 = new Dog('Rex', 'Labrador');\ndog1.speak();  // Rex barks.\n</code></pre> <p>Di sini, Dog mewarisi properti <code>name</code> dan metode <code>speak()</code> dari class Animal, namun kita dapat mengganti metode <code>speak()</code> di class Dog untuk berperilaku berbeda.</p>"},{"location":"dasar/24-Classes/#3-constructor-method","title":"\ud83d\udd11 3. Constructor Method","text":"<p>Constructor adalah metode khusus yang dijalankan saat objek dibuat. Fungsi constructor ini digunakan untuk menginisialisasi properti objek.</p>"},{"location":"dasar/24-Classes/#contoh_2","title":"Contoh:","text":"<pre><code>class Car {\n  constructor(make, model) {\n    this.make = make;\n    this.model = model;\n  }\n\n  getCarInfo() {\n    return `${this.make} ${this.model}`;\n  }\n}\n\nconst car1 = new Car('Toyota', 'Corolla');\nconsole.log(car1.getCarInfo());  // Toyota Corolla\n</code></pre> <p>Di sini, kita menggunakan constructor untuk menginisialisasi properti <code>make</code> dan <code>model</code> untuk setiap objek Car yang dibuat.</p>"},{"location":"dasar/24-Classes/#4-static-methods","title":"\u26a1 4. Static Methods","text":"<p>Static methods adalah metode yang didefinisikan di dalam class tetapi tidak dapat diakses oleh objek yang dibuat dari class tersebut. Static methods hanya dapat dipanggil langsung pada class itu sendiri.</p>"},{"location":"dasar/24-Classes/#sintaks-static-methods","title":"Sintaks Static Methods","text":"<pre><code>class MyClass {\n  static staticMethod() {\n    console.log('This is a static method.');\n  }\n}\n</code></pre>"},{"location":"dasar/24-Classes/#contoh_3","title":"Contoh:","text":"<pre><code>class Calculator {\n  static add(a, b) {\n    return a + b;\n  }\n\n  static subtract(a, b) {\n    return a - b;\n  }\n}\n\nconsole.log(Calculator.add(5, 3));       // 8\nconsole.log(Calculator.subtract(5, 3));  // 2\n</code></pre> <p>Di sini, kita mendefinisikan dua static methods add dan subtract yang bisa dipanggil langsung melalui class Calculator, tanpa perlu membuat objek terlebih dahulu.</p>"},{"location":"dasar/24-Classes/#5-getter-dan-setter","title":"\ud83d\udd27 5. Getter dan Setter","text":"<p>Getter dan Setter digunakan untuk mengakses atau memperbarui nilai properti objek secara terkontrol.</p>"},{"location":"dasar/24-Classes/#sintaks-getter-dan-setter","title":"Sintaks Getter dan Setter","text":"<pre><code>class MyClass {\n  constructor(value) {\n    this._value = value;\n  }\n\n  get value() {\n    return this._value;\n  }\n\n  set value(val) {\n    this._value = val;\n  }\n}\n</code></pre>"},{"location":"dasar/24-Classes/#contoh_4","title":"Contoh:","text":"<pre><code>class Person {\n  constructor(name) {\n    this._name = name;\n  }\n\n  get name() {\n    return this._name;\n  }\n\n  set name(newName) {\n    this._name = newName;\n  }\n}\n\nconst person = new Person('Alice');\nconsole.log(person.name);  // Alice\n\nperson.name = 'Bob';\nconsole.log(person.name);  // Bob\n</code></pre> <p>Dengan getter dan setter, kita bisa mengontrol akses terhadap properti objek dan menyertakan logika tambahan saat membaca atau menulis nilai.</p>"},{"location":"dasar/24-Classes/#tips","title":"\ud83d\udca1 Tips","text":"<ul> <li>Gunakan class untuk mendefinisikan objek dengan pola yang sama, tetapi dengan nilai yang berbeda. Ini akan membuat kode lebih terstruktur dan lebih mudah untuk dikelola.</li> <li>Manfaatkan inheritance untuk memperluas class yang sudah ada dan menghindari duplikasi kode.</li> <li>Static methods sangat berguna untuk fungsi yang tidak bergantung pada objek tertentu dan lebih terkait dengan class itu sendiri.</li> <li>Gunakan getter dan setter untuk mengontrol bagaimana properti objek diakses atau dimodifikasi.</li> </ul>"},{"location":"dasar/24-Classes/#tantangan-coding","title":"\ud83d\udcaa Tantangan Coding","text":"<ol> <li>Buat class Rectangle dengan properti width dan height, dan tambahkan metode untuk menghitung area dan perimeter.</li> <li>Implementasikan pewarisan dengan membuat class Car yang mewarisi dari class Vehicle dan menambahkan properti serta metode tambahan untuk fitur mobil.</li> <li>Coba buat static method untuk menghitung nilai rata-rata dari daftar angka dalam class Statistics.</li> <li>Gunakan getter dan setter untuk mengatur dan mengakses nilai properti age di dalam class Person.</li> </ol>"},{"location":"dasar/24-Classes/#kembali-ke-daftar-materi","title":"\ud83d\udd01 Kembali ke Daftar Materi","text":"<p>```</p> <p>Sekarang kamu sudah paham konsep dasar classes di JavaScript, dan bagaimana cara menggunakannya untuk mendefinisikan objek serta memanfaatkan fitur seperti inheritance, static methods, dan getter/setter. Lanjutkan eksplorasi ke topik lainnya dan gunakan konsep ini dalam pembuatan aplikasi yang lebih kompleks! \ud83d\ude80</p>"},{"location":"dasar/25-Working-with-APIs/","title":"Working with APIs","text":""},{"location":"dasar/25-Working-with-APIs/#working-with-apis","title":"WORKING WITH APIs","text":"<pre><code># \ud83e\udde9 Working with APIs in JavaScript\n\n&gt; \"API (Application Programming Interface) adalah cara aplikasi berbicara dengan aplikasi lain. Dalam JavaScript, kita dapat menggunakan API untuk berinteraksi dengan server atau aplikasi lain untuk mengambil atau mengirimkan data.\"\n\n---\n\n## \ud83c\udfaf Tujuan Pembelajaran\n\nSetelah mempelajari materi ini, kamu akan:\n- Memahami apa itu API dan bagaimana cara kerjanya.\n- Bisa mengakses dan menggunakan API eksternal di JavaScript.\n- Memahami cara menggunakan **fetch API** untuk mendapatkan data dari server.\n- Mempelajari cara menangani respons API dalam format **JSON**.\n- Memahami penggunaan **async/await** untuk membuat kode lebih bersih dan mudah dibaca saat bekerja dengan API.\n\n---\n\n## \ud83d\udcda Apa Itu API?\n\n**API** adalah sekumpulan definisi dan protokol yang digunakan untuk membangun dan mengintegrasikan aplikasi perangkat lunak. API memungkinkan aplikasi untuk berkomunikasi satu sama lain.\n\nContoh penggunaan API yang paling umum adalah mengakses data dari server, seperti mendapatkan informasi cuaca, data produk, atau hasil pencarian.\n\n---\n\n## \ud83d\udee0\ufe0f Mengakses API dengan `fetch()`\n\nJavaScript menyediakan metode **`fetch()`** untuk mengambil data dari API. Fungsi `fetch()` mengirimkan request ke server dan mengembalikan **promise** yang berisi respons dari server.\n\n### Sintaks `fetch()`\n\n```javascript\nfetch(url)\n  .then(response =&gt; response.json()) // Mengonversi respons ke format JSON\n  .then(data =&gt; console.log(data))    // Menampilkan data API\n  .catch(error =&gt; console.error('Error:', error)); // Menangani error\n</code></pre>"},{"location":"dasar/25-Working-with-APIs/#contoh-penggunaan-fetch","title":"Contoh Penggunaan <code>fetch()</code>:","text":"<pre><code>fetch('https://api.example.com/data')\n  .then(response =&gt; response.json())  // Mengonversi respons ke JSON\n  .then(data =&gt; {\n    console.log(data); // Menampilkan data\n  })\n  .catch(error =&gt; console.log('Error:', error));\n</code></pre> <p>Di sini, kita menggunakan <code>fetch()</code> untuk mengakses data dari URL yang diberikan. Jika data berhasil didapatkan, kita mengonversinya menjadi format JSON dan menampilkannya.</p>"},{"location":"dasar/25-Working-with-APIs/#1-mengambil-data-dari-api","title":"\ud83e\udde0 1. Mengambil Data dari API","text":"<p>Untuk mengambil data dari API, kamu biasanya mengirimkan request HTTP GET. Berikut adalah contoh menggunakan <code>fetch()</code> untuk mengambil data dari API.</p>"},{"location":"dasar/25-Working-with-APIs/#contoh-mengambil-data-pengguna-dari-api","title":"Contoh: Mengambil Data Pengguna dari API","text":"<pre><code>fetch('https://jsonplaceholder.typicode.com/users')\n  .then(response =&gt; response.json())\n  .then(users =&gt; {\n    users.forEach(user =&gt; {\n      console.log(`Nama: ${user.name}, Email: ${user.email}`);\n    });\n  })\n  .catch(error =&gt; console.log('Error:', error));\n</code></pre> <p>Di sini, kita mengambil data pengguna dari API <code>jsonplaceholder.typicode.com</code> dan menampilkan nama dan email setiap pengguna.</p>"},{"location":"dasar/25-Working-with-APIs/#2-mengirim-data-ke-api-post-request","title":"\ud83d\udd04 2. Mengirim Data ke API (POST Request)","text":"<p>Selain mengambil data, kamu juga bisa mengirimkan data ke API menggunakan POST request. Untuk ini, kamu perlu menambahkan beberapa opsi ke <code>fetch()</code>, seperti method, headers, dan body.</p>"},{"location":"dasar/25-Working-with-APIs/#sintaks-post-request","title":"Sintaks POST Request:","text":"<pre><code>fetch(url, {\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/json'\n  },\n  body: JSON.stringify(data)\n})\n  .then(response =&gt; response.json())  // Mengonversi respons ke JSON\n  .then(data =&gt; console.log(data))    // Menampilkan data\n  .catch(error =&gt; console.error('Error:', error));  // Menangani error\n</code></pre>"},{"location":"dasar/25-Working-with-APIs/#contoh-mengirim-data-pengguna-baru-ke-api","title":"Contoh: Mengirim Data Pengguna Baru ke API","text":"<pre><code>const newUser = {\n  name: 'John Doe',\n  email: 'john.doe@example.com'\n};\n\nfetch('https://jsonplaceholder.typicode.com/users', {\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/json'\n  },\n  body: JSON.stringify(newUser)\n})\n  .then(response =&gt; response.json())\n  .then(data =&gt; {\n    console.log('User created:', data);\n  })\n  .catch(error =&gt; console.error('Error:', error));\n</code></pre> <p>Di sini, kita mengirimkan data pengguna baru ke API menggunakan POST request. Data dikirim dalam format JSON, dan kita menunggu respons dari server untuk mengonfirmasi bahwa data telah berhasil ditambahkan.</p>"},{"location":"dasar/25-Working-with-APIs/#3-menggunakan-asyncawait","title":"\u23f3 3. Menggunakan <code>async/await</code>","text":"<p><code>async/await</code> adalah cara yang lebih modern dan lebih bersih untuk menangani operasi asynchronous, seperti mengambil data dari API. <code>async</code> memungkinkan kamu untuk menggunakan <code>await</code> di dalamnya, yang membuat kode kamu terlihat lebih mirip dengan kode sinkron.</p>"},{"location":"dasar/25-Working-with-APIs/#sintaks-asyncawait","title":"Sintaks <code>async/await</code>:","text":"<pre><code>async function fetchData() {\n  try {\n    const response = await fetch(url);  // Tunggu hingga data diterima\n    const data = await response.json();  // Mengonversi respons ke JSON\n    console.log(data);\n  } catch (error) {\n    console.error('Error:', error);\n  }\n}\n</code></pre>"},{"location":"dasar/25-Working-with-APIs/#contoh-menggunakan-asyncawait-untuk-mengambil-data","title":"Contoh: Menggunakan <code>async/await</code> untuk Mengambil Data","text":"<pre><code>async function getUserData() {\n  try {\n    const response = await fetch('https://jsonplaceholder.typicode.com/users');\n    const users = await response.json();\n    users.forEach(user =&gt; {\n      console.log(`Nama: ${user.name}, Email: ${user.email}`);\n    });\n  } catch (error) {\n    console.log('Error:', error);\n  }\n}\n\ngetUserData();\n</code></pre> <p>Dengan menggunakan <code>async/await</code>, kita bisa menangani API secara lebih rapi dan mudah dibaca, menghindari callback hell yang terjadi saat menggunakan <code>.then()</code>.</p>"},{"location":"dasar/25-Working-with-APIs/#4-menangani-error-dengan-trycatch","title":"\ud83d\uded1 4. Menangani Error dengan <code>try/catch</code>","text":"<p>Saat bekerja dengan API, penting untuk menangani error yang mungkin terjadi, misalnya jika server tidak dapat dijangkau atau ada kesalahan dalam data yang dikirimkan.</p>"},{"location":"dasar/25-Working-with-APIs/#menangani-error-dengan-catch","title":"Menangani Error dengan <code>catch()</code>:","text":"<pre><code>fetch('https://api.example.com/data')\n  .then(response =&gt; {\n    if (!response.ok) {\n      throw new Error('Network response was not ok');\n    }\n    return response.json();\n  })\n  .then(data =&gt; console.log(data))\n  .catch(error =&gt; console.log('Error:', error));\n</code></pre>"},{"location":"dasar/25-Working-with-APIs/#menangani-error-dengan-trycatch-menggunakan-asyncawait","title":"Menangani Error dengan <code>try/catch</code> (menggunakan async/await):","text":"<pre><code>async function fetchData() {\n  try {\n    const response = await fetch('https://api.example.com/data');\n    if (!response.ok) {\n      throw new Error('Network response was not ok');\n    }\n    const data = await response.json();\n    console.log(data);\n  } catch (error) {\n    console.log('Error:', error);\n  }\n}\n\nfetchData();\n</code></pre> <p>Dengan <code>try/catch</code> atau <code>.catch()</code>, kita bisa menangani error dengan lebih baik dan memberikan informasi yang berguna jika terjadi masalah.</p>"},{"location":"dasar/25-Working-with-APIs/#tips","title":"\ud83d\udca1 Tips","text":"<ul> <li>Gunakan <code>async/await</code> untuk menulis kode asynchronous dengan lebih bersih dan mudah dibaca.</li> <li>Selalu menangani error ketika bekerja dengan API, terutama jika ada kemungkinan server tidak merespons atau data yang diterima tidak sesuai.</li> <li>Periksa status respons dengan <code>.ok</code> untuk memastikan bahwa request ke API berhasil sebelum memproses data.</li> <li>Jangan lupa untuk selalu menangani CORS (Cross-Origin Resource Sharing) ketika bekerja dengan API yang berasal dari domain berbeda.</li> </ul>"},{"location":"dasar/25-Working-with-APIs/#tantangan-coding","title":"\ud83d\udcaa Tantangan Coding","text":"<ol> <li>Buat aplikasi yang menampilkan daftar pengguna dari API <code>https://jsonplaceholder.typicode.com/users</code> menggunakan <code>fetch()</code> dan tampilkan nama dan emailnya di halaman HTML.</li> <li>Kirim data pengguna baru (seperti nama dan email) ke API dan tampilkan respons yang diterima.</li> <li>Coba gunakan <code>async/await</code> untuk mengambil data dari API dan tampilkan hasilnya di halaman web.</li> <li>Implementasikan penanganan error untuk API yang gagal dimuat, seperti menampilkan pesan kesalahan kepada pengguna.</li> </ol>"},{"location":"dasar/25-Working-with-APIs/#kembali-ke-daftar-materi","title":"\ud83d\udd01 Kembali ke Daftar Materi","text":"<pre><code>\n---\n\nSekarang kamu telah mempelajari cara bekerja dengan **API** menggunakan JavaScript, baik untuk mengambil maupun mengirimkan data ke server. Ini adalah keterampilan yang sangat penting dalam pengembangan aplikasi web modern. Jangan ragu untuk menguji pengetahuanmu dengan tantangan coding yang telah disediakan! \ud83d\ude80\n</code></pre>"},{"location":"dasar/25-Working-with-APIs/#back-home-next","title":"BACK    ---    HOME --- NEXT","text":""},{"location":"dasar/26-Memory-Management/","title":"Memory Management","text":"<p>Berikut adalah isi lengkap untuk file <code>D:\\dokumentasi\\javascript\\belajar-javascript-pemula\\docs\\dasar\\26-Memory-Management.md</code>:</p> <pre><code># \ud83e\udde0 Memory Management in JavaScript\n\n&gt; \"Manajemen memori dalam JavaScript adalah cara untuk mengelola alokasi dan pembersihan memori yang digunakan oleh aplikasi selama proses eksekusi. Meskipun JavaScript memiliki pengelola memori otomatis, pemahaman tentang cara memori dikelola dapat membantu kita menulis aplikasi yang lebih efisien.\"\n\n---\n\n## \ud83c\udfaf Tujuan Pembelajaran\n\nSetelah mempelajari materi ini, kamu akan:\n- Memahami konsep dasar dari manajemen memori di JavaScript.\n- Mengetahui bagaimana JavaScript menangani alokasi dan pembersihan memori.\n- Mengerti cara kerja **garbage collection**.\n- Mengetahui bagaimana cara menghindari **memory leaks** yang dapat mengurangi kinerja aplikasi.\n\n---\n\n## \ud83d\udcda Apa Itu Manajemen Memori?\n\nManajemen memori adalah proses pengalokasian memori untuk data yang digunakan oleh program dan kemudian membebaskan memori tersebut ketika sudah tidak digunakan lagi.\n\nJavaScript memiliki **garbage collector** (pengumpul sampah) yang secara otomatis mengelola memori, memastikan bahwa memori yang tidak lagi digunakan dibersihkan. Meskipun demikian, sebagai pengembang, kita harus tetap waspada terhadap potensi masalah memori, seperti **memory leaks**.\n\n---\n\n## \ud83e\uddd1\u200d\ud83d\udcbb Garbage Collection\n\n**Garbage collection** adalah proses otomatis di JavaScript yang bertugas untuk mengidentifikasi objek-objek yang tidak lagi digunakan dan membebaskan memori yang mereka gunakan. Proses ini dilakukan secara otomatis oleh JavaScript, tetapi kita sebagai pengembang perlu memahami prinsip dasarnya.\n\n### **Reachability** dan **Mark-and-Sweep**\n\nJavaScript menggunakan algoritma **mark-and-sweep** untuk garbage collection. Berikut adalah langkah-langkah dasarnya:\n1. **Marking**: Sistem akan memeriksa objek-objek yang masih dapat dijangkau (reachable) dari root program. Objek yang tidak dapat dijangkau dianggap tidak terpakai.\n2. **Sweeping**: Memori yang digunakan oleh objek-objek yang tidak terjangkau akan dibebaskan.\n\nContoh objek yang tidak terjangkau adalah objek yang tidak lagi memiliki referensi di dalam kode.\n\n---\n\n## \ud83e\udde9 Memory Leaks\n\n**Memory leaks** terjadi ketika aplikasi terus menggunakan memori tanpa melepaskannya setelah tidak lagi dibutuhkan, yang dapat menyebabkan aplikasi menjadi lebih lambat dan menghabiskan lebih banyak sumber daya.\n\nBeberapa penyebab umum memory leaks di JavaScript antara lain:\n- **Referensi yang tersisa**: Ketika objek atau elemen DOM yang tidak lagi digunakan tetap direferensikan.\n- **Event listeners yang tidak dibersihkan**: Ketika event listener ditambahkan tetapi tidak dihapus setelah elemen tidak lagi digunakan.\n- **Global variables**: Menggunakan variabel global yang tidak dikelola dengan baik dapat mengakibatkan memori yang tidak dibersihkan.\n\n### Contoh Memory Leak\n\n```javascript\nfunction createLeak() {\n  let largeObject = new Array(1000000).fill('leak');\n  // Tidak ada cara untuk membebaskan 'largeObject', menyebabkan memory leak.\n}\n\ncreateLeak();\n</code></pre> <p>Di sini, meskipun <code>largeObject</code> seharusnya tidak digunakan lagi setelah keluar dari fungsi, referensi tersebut tetap ada dalam memori karena tidak ada yang membersihkannya.</p>"},{"location":"dasar/26-Memory-Management/#cara-menghindari-memory-leaks","title":"\ud83d\udee0\ufe0f Cara Menghindari Memory Leaks","text":"<p>Beberapa tips untuk menghindari memory leaks di JavaScript:</p>"},{"location":"dasar/26-Memory-Management/#1-hapus-referensi-yang-tidak-digunakan","title":"1. Hapus Referensi yang Tidak Digunakan","text":"<p>Pastikan untuk menghapus referensi objek yang tidak diperlukan lagi untuk memungkinkan garbage collector membebaskan memori.</p> <pre><code>let user = { name: 'John' };\nuser = null; // Memutuskan referensi untuk memungkinkan garbage collection\n</code></pre>"},{"location":"dasar/26-Memory-Management/#2-gunakan-let-dan-const-sebagai-ganti-var","title":"2. Gunakan <code>let</code> dan <code>const</code> Sebagai Ganti <code>var</code>","text":"<p>Penggunaan <code>let</code> dan <code>const</code> memastikan bahwa variabel hanya memiliki cakupan yang dibutuhkan, sehingga mencegah variabel global yang tidak sengaja dibuat.</p>"},{"location":"dasar/26-Memory-Management/#3-hapus-event-listeners-yang-tidak-diperlukan","title":"3. Hapus Event Listeners yang Tidak Diperlukan","text":"<p>Jika kamu menambahkan event listener ke elemen, pastikan untuk menghapusnya ketika elemen tidak lagi digunakan.</p> <pre><code>const button = document.getElementById('myButton');\n\nfunction handleClick() {\n  console.log('Button clicked');\n}\n\nbutton.addEventListener('click', handleClick);\n\n// Setelah tidak diperlukan\nbutton.removeEventListener('click', handleClick);\n</code></pre>"},{"location":"dasar/26-Memory-Management/#4-gunakan-weak-references-untuk-objek-yang-dapat-dihapus","title":"4. Gunakan Weak References (Untuk Objek yang Dapat Dihapus)","text":"<p>Jika kamu ingin objek dapat dihapus oleh garbage collector meskipun masih ada referensi yang mengarah ke objek tersebut, kamu bisa menggunakan WeakMap atau WeakSet. Referensi pada WeakMap dan WeakSet tidak menghalangi objek untuk dibersihkan oleh garbage collector.</p> <pre><code>let obj = {};\nlet weakMap = new WeakMap();\nweakMap.set(obj, 'value');\n\n// Jika 'obj' tidak lagi digunakan, ia akan otomatis dibersihkan oleh garbage collector\nobj = null;\n</code></pre>"},{"location":"dasar/26-Memory-Management/#penyempurnaan-garbage-collection","title":"\u2699\ufe0f Penyempurnaan Garbage Collection","text":"<p>JavaScript memiliki beberapa mekanisme internal untuk membantu manajemen memori yang lebih efisien. Di antaranya adalah generational garbage collection, di mana objek-objek yang lebih muda lebih cepat dibersihkan dibandingkan objek yang lebih lama. Ini dilakukan untuk mengoptimalkan kinerja, karena objek yang lebih lama kemungkinan akan digunakan lebih lama dan lebih jarang dibersihkan.</p>"},{"location":"dasar/26-Memory-Management/#tips-dan-trik-memperbaiki-masalah-memori","title":"\ud83e\uddd1\u200d\ud83d\udcbb Tips dan Trik Memperbaiki Masalah Memori","text":"<ol> <li> <p>Analisis Penggunaan Memori: Gunakan tools seperti Chrome DevTools untuk menganalisis penggunaan memori aplikasi. Ini bisa membantu kamu mendeteksi objek-objek yang tidak terhapus.</p> </li> <li> <p>Buka DevTools di Chrome, pilih tab Memory, dan pilih jenis analisis yang ingin dilakukan (misalnya Heap Snapshot atau Allocation instrumentation).</p> </li> <li> <p>Pahami Pola Penggunaan Memori: Kenali kapan aplikasi membutuhkan memori lebih banyak dan bagaimana cara memanfaatkannya secara efisien.</p> </li> <li> <p>Modularisasi Kode: Pecah kode menjadi komponen yang lebih kecil dan lebih mudah dikelola untuk meminimalkan referensi yang tidak terhapus.</p> </li> <li> <p>Jangan Menggunakan <code>setInterval</code> atau <code>setTimeout</code> Secara Berlebihan: Jika kamu tidak menghentikan <code>setInterval</code> atau <code>setTimeout</code>, mereka dapat menyebabkan kebocoran memori karena referensinya tetap ada.</p> </li> </ol>"},{"location":"dasar/26-Memory-Management/#kesimpulan","title":"\ud83d\udca1 Kesimpulan","text":"<p>Memahami manajemen memori sangat penting dalam mengembangkan aplikasi JavaScript yang efisien dan berkinerja baik. Meskipun JavaScript mengelola sebagian besar memori secara otomatis, pengembang harus tetap waspada terhadap memory leaks dan menggunakan praktik terbaik untuk menghindarinya. Dengan cara ini, kita dapat memastikan bahwa aplikasi kita tetap responsif dan bebas dari masalah kinerja.</p>"},{"location":"dasar/26-Memory-Management/#kembali-ke-daftar-materi","title":"\ud83d\udd01 Kembali ke Daftar Materi","text":"<p>```</p> <p>Dokumentasi ini memberikan panduan yang komprehensif mengenai manajemen memori di JavaScript. Mulai dari konsep dasar tentang garbage collection hingga cara menghindari memory leaks yang dapat mempengaruhi performa aplikasi.</p>"},{"location":"dasar/27-Using-Browser-DevTools/","title":"Using Browser DevTools","text":"<pre><code># \ud83d\udee0\ufe0f Using Browser DevTools for Debugging\n\n&gt; \"Browser Developer Tools (DevTools) adalah sekumpulan alat yang disediakan oleh browser untuk membantu pengembang dalam proses debugging, memeriksa elemen, serta menganalisis kinerja aplikasi web. Ini adalah alat yang sangat penting untuk setiap pengembang.\"\n\n---\n\n## \ud83c\udfaf Tujuan Pembelajaran\n\nSetelah mempelajari materi ini, kamu akan:\n- Mengerti bagaimana cara menggunakan **Browser Developer Tools (DevTools)**.\n- Mampu melakukan **debugging** dan menganalisis kinerja aplikasi dengan DevTools.\n- Memahami bagaimana cara memeriksa elemen HTML, JavaScript, dan CSS menggunakan DevTools.\n\n---\n\n## \ud83d\udcda Apa Itu Browser Developer Tools?\n\n**Browser Developer Tools** (sering disingkat **DevTools**) adalah alat yang disediakan oleh hampir semua browser modern (seperti Google Chrome, Mozilla Firefox, dan Microsoft Edge). DevTools memungkinkan pengembang untuk mengakses berbagai fitur yang berguna dalam menganalisis dan memperbaiki masalah dalam aplikasi web, termasuk:\n\n- **Memeriksa dan mengedit elemen HTML/CSS**.\n- **Melihat konsol JavaScript** untuk pesan log, error, dan peringatan.\n- **Melakukan debugging JavaScript** secara langsung.\n- **Memantau kinerja aplikasi** dan penggunaan memori.\n- **Menganalisis permintaan jaringan** untuk memeriksa API atau file yang dimuat.\n\n---\n\n## \ud83d\ude80 Mengakses Developer Tools\n\nDi browser Google Chrome, DevTools bisa diakses dengan berbagai cara:\n- Klik kanan pada halaman dan pilih **Inspect** (atau tekan `Ctrl + Shift + I` di Windows atau `Cmd + Option + I` di macOS).\n- Atau, buka menu tiga titik di sudut kanan atas, pilih **More Tools** &gt; **Developer Tools**.\n\nBegitu DevTools terbuka, kamu akan melihat berbagai tab yang bisa digunakan untuk menganalisis dan memperbaiki aplikasi web.\n\n---\n\n## \ud83d\udcdd Memeriksa dan Mengedit Elemen HTML/CSS\n\nSalah satu fitur utama dari DevTools adalah kemampuannya untuk memeriksa dan mengedit elemen HTML dan CSS yang ada di halaman web.\n\n### Memeriksa Elemen HTML\n1. Pilih tab **Elements** di DevTools.\n2. Di panel sebelah kiri, kamu akan melihat struktur HTML dari halaman tersebut.\n3. Kamu dapat mengklik elemen untuk melihat atributnya dan mengedit HTML atau CSS langsung di panel tersebut.\n\nContoh:\n- Klik kanan elemen di halaman dan pilih **Inspect** untuk langsung memilih elemen HTML tersebut di panel **Elements**.\n\n### Mengedit CSS\n- Pilih elemen HTML di panel **Elements**, dan di bagian sebelah kanan kamu akan melihat **Styles**.\n- Di sini, kamu bisa mengedit atau menambahkan aturan CSS untuk elemen tersebut secara langsung, dan perubahan akan langsung terlihat di halaman.\n\n---\n\n## \ud83d\udda5\ufe0f Menggunakan Console untuk Debugging\n\nTab **Console** sangat berguna untuk menampilkan pesan log, error, dan peringatan yang dihasilkan oleh JavaScript.\n\n### Melihat Error dan Peringatan\n- Jika ada error di JavaScript, pesan error akan muncul di tab **Console** dengan rincian tentang lokasi dan jenis kesalahan.\n- Kamu dapat mengklik pesan error untuk langsung menuju lokasi kesalahan di kode.\n\n### Menjalankan Perintah JavaScript\n- Di panel **Console**, kamu juga dapat menjalankan perintah JavaScript secara langsung.\n- Ini sangat berguna untuk menguji potongan kode, memeriksa nilai variabel, atau mengeksplorasi objek di aplikasi web kamu.\n\nContoh:\n```javascript\nconsole.log(\"Hello, World!\");\n</code></pre>"},{"location":"dasar/27-Using-Browser-DevTools/#debugging-javascript-dengan-devtools","title":"\ud83d\udc1e Debugging JavaScript dengan DevTools","text":"<p>DevTools memungkinkan kamu untuk melakukan debugging JavaScript secara langsung, seperti menambahkan breakpoint dan melangkah melalui kode baris per baris.</p>"},{"location":"dasar/27-Using-Browser-DevTools/#menambahkan-breakpoint","title":"Menambahkan Breakpoint","text":"<ol> <li>Buka tab Sources di DevTools.</li> <li>Pilih file JavaScript yang ingin kamu debug.</li> <li>Klik pada nomor baris di file JavaScript untuk menambahkan breakpoint. Ketika eksekusi mencapai baris tersebut, aplikasi akan berhenti dan kamu dapat memeriksa nilai variabel dan alur eksekusi.</li> </ol>"},{"location":"dasar/27-Using-Browser-DevTools/#melangkah-melalui-kode","title":"Melangkah Melalui Kode","text":"<ul> <li>Setelah breakpoint tercapai, kamu dapat menggunakan tombol Step Over, Step Into, dan Step Out untuk melangkah melalui kode secara baris per baris.</li> <li>Ini memungkinkan kamu untuk menganalisis apa yang terjadi dalam setiap langkah eksekusi kode.</li> </ul>"},{"location":"dasar/27-Using-Browser-DevTools/#memantau-jaringan-dan-permintaan-api","title":"\ud83d\udcf6 Memantau Jaringan dan Permintaan API","text":"<p>Tab Network di DevTools memungkinkan kamu untuk melihat semua permintaan jaringan yang dibuat oleh aplikasi, seperti permintaan API, file statis (CSS, JS), dan gambar.</p>"},{"location":"dasar/27-Using-Browser-DevTools/#menganalisis-permintaan-jaringan","title":"Menganalisis Permintaan Jaringan","text":"<ol> <li>Pilih tab Network di DevTools.</li> <li>Muat ulang halaman untuk melihat semua permintaan yang dilakukan oleh aplikasi.</li> <li>Kamu dapat memeriksa detail setiap permintaan, termasuk status HTTP, header, dan waktu yang dibutuhkan untuk memuat sumber daya.</li> </ol>"},{"location":"dasar/27-Using-Browser-DevTools/#menggunakan-xhrfetch-untuk-memeriksa-api","title":"Menggunakan XHR/Fetch untuk Memeriksa API","text":"<ul> <li>Jika aplikasi kamu menggunakan AJAX atau Fetch API, kamu bisa melihat permintaan dan respons yang dikirim dan diterima melalui tab Network.</li> <li>Ini memungkinkan kamu untuk memeriksa apakah API berfungsi dengan benar dan melihat data yang diterima oleh aplikasi.</li> </ul>"},{"location":"dasar/27-Using-Browser-DevTools/#menganalisis-kinerja-aplikasi","title":"\ud83d\udcca Menganalisis Kinerja Aplikasi","text":"<p>Tab Performance memungkinkan kamu untuk menganalisis kinerja aplikasi web, seperti waktu yang dibutuhkan untuk memuat halaman, penggunaan memori, dan kecepatan eksekusi JavaScript.</p>"},{"location":"dasar/27-Using-Browser-DevTools/#merekam-kinerja","title":"Merekam Kinerja","text":"<ol> <li>Pilih tab Performance di DevTools.</li> <li>Klik tombol Record dan lakukan tindakan di halaman yang ingin kamu analisis (misalnya, klik tombol atau muat ulang halaman).</li> <li>Setelah perekaman selesai, kamu dapat melihat grafik yang menunjukkan aktivitas yang terjadi selama perekaman, termasuk waktu yang dibutuhkan untuk rendering dan pemrosesan JavaScript.</li> </ol>"},{"location":"dasar/27-Using-Browser-DevTools/#memantau-penggunaan-memori","title":"Memantau Penggunaan Memori","text":"<ul> <li>Kamu bisa memeriksa penggunaan memori aplikasi dengan menggunakan tab Memory.</li> <li>Ini membantu kamu mengidentifikasi kebocoran memori dan bagian aplikasi yang menghabiskan terlalu banyak sumber daya.</li> </ul>"},{"location":"dasar/27-Using-Browser-DevTools/#tips-berguna-untuk-developer","title":"\ud83e\uddd1\u200d\ud83d\udcbb Tips Berguna untuk Developer","text":"<ol> <li>Simpan Pesan Konsol: Gunakan <code>console.log()</code> secara bijaksana untuk menampilkan pesan debug di konsol agar kamu bisa mengikuti jalannya aplikasi.</li> <li>Gunakan Console.table(): Untuk menampilkan data array atau objek dalam format tabel yang mudah dibaca di konsol.</li> <li>Periksa Respons API: Gunakan tab Network untuk melihat respons API yang diterima dan memastikan bahwa data diterima dengan benar.</li> <li>Gunakan LocalStorage: Kamu dapat memeriksa dan mengedit data yang disimpan di localStorage atau sessionStorage melalui tab Application di DevTools.</li> </ol>"},{"location":"dasar/27-Using-Browser-DevTools/#kesimpulan","title":"\ud83d\udca1 Kesimpulan","text":"<p>Browser Developer Tools adalah alat yang sangat powerful untuk setiap pengembang JavaScript. Dengan DevTools, kamu dapat dengan mudah melakukan debugging, memeriksa elemen HTML/CSS, memantau permintaan jaringan, dan menganalisis kinerja aplikasi. Memahami cara menggunakan DevTools dengan baik akan membuatmu lebih efisien dalam menangani masalah dan mengoptimalkan aplikasi.</p>"},{"location":"dasar/27-Using-Browser-DevTools/#kembali-ke-daftar-materi","title":"\ud83d\udd01 Kembali ke Daftar Materi","text":"<p>```</p>"}]}